// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Conv,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=15,HLS_SYN_FF=3682,HLS_SYN_LUT=4279,HLS_VERSION=2018_3}" *)

module Conv (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 71'd1;
parameter    ap_ST_fsm_state2 = 71'd2;
parameter    ap_ST_fsm_state3 = 71'd4;
parameter    ap_ST_fsm_state4 = 71'd8;
parameter    ap_ST_fsm_state5 = 71'd16;
parameter    ap_ST_fsm_state6 = 71'd32;
parameter    ap_ST_fsm_state7 = 71'd64;
parameter    ap_ST_fsm_state8 = 71'd128;
parameter    ap_ST_fsm_state9 = 71'd256;
parameter    ap_ST_fsm_state10 = 71'd512;
parameter    ap_ST_fsm_state11 = 71'd1024;
parameter    ap_ST_fsm_state12 = 71'd2048;
parameter    ap_ST_fsm_state13 = 71'd4096;
parameter    ap_ST_fsm_state14 = 71'd8192;
parameter    ap_ST_fsm_state15 = 71'd16384;
parameter    ap_ST_fsm_state16 = 71'd32768;
parameter    ap_ST_fsm_state17 = 71'd65536;
parameter    ap_ST_fsm_state18 = 71'd131072;
parameter    ap_ST_fsm_state19 = 71'd262144;
parameter    ap_ST_fsm_state20 = 71'd524288;
parameter    ap_ST_fsm_state21 = 71'd1048576;
parameter    ap_ST_fsm_state22 = 71'd2097152;
parameter    ap_ST_fsm_state23 = 71'd4194304;
parameter    ap_ST_fsm_state24 = 71'd8388608;
parameter    ap_ST_fsm_state25 = 71'd16777216;
parameter    ap_ST_fsm_state26 = 71'd33554432;
parameter    ap_ST_fsm_state27 = 71'd67108864;
parameter    ap_ST_fsm_state28 = 71'd134217728;
parameter    ap_ST_fsm_state29 = 71'd268435456;
parameter    ap_ST_fsm_state30 = 71'd536870912;
parameter    ap_ST_fsm_state31 = 71'd1073741824;
parameter    ap_ST_fsm_state32 = 71'd2147483648;
parameter    ap_ST_fsm_state33 = 71'd4294967296;
parameter    ap_ST_fsm_state34 = 71'd8589934592;
parameter    ap_ST_fsm_state35 = 71'd17179869184;
parameter    ap_ST_fsm_state36 = 71'd34359738368;
parameter    ap_ST_fsm_state37 = 71'd68719476736;
parameter    ap_ST_fsm_state38 = 71'd137438953472;
parameter    ap_ST_fsm_state39 = 71'd274877906944;
parameter    ap_ST_fsm_state40 = 71'd549755813888;
parameter    ap_ST_fsm_state41 = 71'd1099511627776;
parameter    ap_ST_fsm_state42 = 71'd2199023255552;
parameter    ap_ST_fsm_state43 = 71'd4398046511104;
parameter    ap_ST_fsm_state44 = 71'd8796093022208;
parameter    ap_ST_fsm_state45 = 71'd17592186044416;
parameter    ap_ST_fsm_state46 = 71'd35184372088832;
parameter    ap_ST_fsm_state47 = 71'd70368744177664;
parameter    ap_ST_fsm_state48 = 71'd140737488355328;
parameter    ap_ST_fsm_state49 = 71'd281474976710656;
parameter    ap_ST_fsm_state50 = 71'd562949953421312;
parameter    ap_ST_fsm_state51 = 71'd1125899906842624;
parameter    ap_ST_fsm_state52 = 71'd2251799813685248;
parameter    ap_ST_fsm_state53 = 71'd4503599627370496;
parameter    ap_ST_fsm_state54 = 71'd9007199254740992;
parameter    ap_ST_fsm_state55 = 71'd18014398509481984;
parameter    ap_ST_fsm_state56 = 71'd36028797018963968;
parameter    ap_ST_fsm_state57 = 71'd72057594037927936;
parameter    ap_ST_fsm_state58 = 71'd144115188075855872;
parameter    ap_ST_fsm_state59 = 71'd288230376151711744;
parameter    ap_ST_fsm_state60 = 71'd576460752303423488;
parameter    ap_ST_fsm_state61 = 71'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 71'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 71'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 71'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 71'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 71'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 71'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 71'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 71'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 71'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 71'd1180591620717411303424;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [70:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] CHin_V;
wire   [15:0] Hin_V;
wire   [15:0] Win_V;
wire   [15:0] CHout_V;
wire   [7:0] Kx_V;
wire   [7:0] Ky_V;
wire   [7:0] Sx_V;
wire   [7:0] Sy_V;
wire   [0:0] pd_mode_V;
wire   [0:0] relu_en_V;
wire   [31:0] feature_in;
wire   [31:0] conv_w;
wire   [31:0] bias;
wire   [31:0] feature_out;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state29;
wire   [0:0] exitcond3_fu_899_p2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state42;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state65;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state66;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state71;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [0:0] relu_en_V_read_reg_1178;
reg   [7:0] Sy_V_read_reg_1183;
reg   [7:0] Sx_V_read_reg_1189;
reg   [7:0] Ky_V_read_reg_1194;
reg   [7:0] Kx_V_read_reg_1200;
reg   [15:0] CHout_V_read_reg_1207;
reg   [15:0] Win_V_read_reg_1214;
reg   [15:0] Hin_V_read_reg_1220;
reg   [15:0] CHin_V_read_reg_1226;
reg   [29:0] tmp_1_reg_1233;
reg   [29:0] tmp_2_reg_1238;
reg   [29:0] tmp_4_reg_1243;
reg   [29:0] tmp_5_reg_1248;
wire   [7:0] p_1_fu_614_p3;
reg   [7:0] p_1_reg_1253;
wire   [16:0] ret_V_7_fu_664_p2;
reg   [16:0] ret_V_7_reg_1259;
wire    ap_CS_fsm_state2;
wire   [48:0] tmp_1_cast1_fu_741_p1;
reg   [48:0] tmp_1_cast1_reg_1284;
wire    ap_CS_fsm_state24;
wire   [30:0] tmp_8_cast_fu_744_p1;
reg   [30:0] tmp_8_cast_reg_1289;
wire   [48:0] tmp_10_cast_fu_747_p1;
reg   [48:0] tmp_10_cast_reg_1294;
wire   [48:0] tmp_11_cast_fu_750_p1;
reg   [48:0] tmp_11_cast_reg_1299;
wire   [15:0] Wout_V_fu_757_p2;
reg   [15:0] Wout_V_reg_1304;
wire   [15:0] tmp_7_fu_767_p2;
reg   [15:0] tmp_7_reg_1309;
wire   [15:0] tmp_9_fu_773_p1;
reg   [15:0] tmp_9_reg_1314;
wire   [15:0] tmp_s_fu_776_p1;
reg   [15:0] tmp_s_reg_1320;
wire   [31:0] rhs_V_fu_779_p1;
reg   [31:0] rhs_V_reg_1326;
wire   [47:0] rhs_V_1_fu_782_p1;
reg   [47:0] rhs_V_1_reg_1333;
wire   [15:0] rhs_V_1_cast_fu_785_p1;
reg   [15:0] rhs_V_1_cast_reg_1338;
wire   [47:0] rhs_V_7_cast1_fu_788_p1;
reg   [47:0] rhs_V_7_cast1_reg_1343;
wire   [23:0] rhs_V_10_cast_fu_791_p1;
reg   [23:0] rhs_V_10_cast_reg_1349;
wire   [31:0] rhs_V_8_cast_fu_794_p1;
reg   [31:0] rhs_V_8_cast_reg_1354;
wire   [31:0] rhs_V_6_cast_fu_797_p1;
reg   [31:0] rhs_V_6_cast_reg_1360;
wire   [15:0] cout_fu_806_p2;
reg   [15:0] cout_reg_1368;
wire    ap_CS_fsm_state25;
wire   [31:0] tmp_13_cast_fu_816_p1;
reg   [31:0] tmp_13_cast_reg_1373;
wire   [0:0] exitcond1_fu_801_p2;
reg   [31:0] gmem_addr_reg_1379;
wire   [15:0] next_mul1_fu_835_p2;
reg   [15:0] next_mul1_reg_1385;
wire    ap_CS_fsm_state26;
wire   [15:0] i_fu_849_p2;
reg   [15:0] i_reg_1393;
wire   [31:0] ret_V_fu_1157_p2;
reg   [31:0] ret_V_reg_1398;
wire   [0:0] exitcond2_fu_844_p2;
wire   [15:0] tmp_16_fu_855_p2;
reg   [15:0] tmp_16_reg_1403;
wire    ap_CS_fsm_state27;
wire   [47:0] ret_V_1_fu_863_p2;
reg   [47:0] ret_V_1_reg_1408;
wire   [15:0] next_mul2_fu_868_p2;
reg   [15:0] next_mul2_reg_1413;
wire    ap_CS_fsm_state28;
wire   [31:0] next_mul3_fu_873_p2;
reg   [31:0] next_mul3_reg_1418;
wire   [15:0] j_fu_883_p2;
reg   [15:0] j_reg_1426;
wire   [15:0] tmp_19_fu_889_p2;
reg   [15:0] tmp_19_reg_1431;
wire   [0:0] exitcond_fu_878_p2;
wire   [15:0] next_mul4_fu_894_p2;
reg   [15:0] next_mul4_reg_1436;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_block_state29_io;
wire   [7:0] ii_fu_904_p2;
reg   [7:0] ii_reg_1444;
wire   [0:0] tmp_25_fu_919_p2;
reg   [0:0] tmp_25_reg_1449;
wire   [31:0] ret_V_13_fu_1162_p2;
reg   [31:0] ret_V_13_reg_1454;
wire   [47:0] tmp_23_fu_937_p2;
reg   [47:0] tmp_23_reg_1459;
wire   [47:0] ret_V_9_fu_945_p2;
reg   [47:0] ret_V_9_reg_1464;
wire    ap_CS_fsm_state30;
wire   [31:0] ret_V_10_fu_1167_p2;
reg   [31:0] ret_V_10_reg_1469;
wire   [23:0] next_mul5_fu_954_p2;
reg   [23:0] next_mul5_reg_1474;
wire    ap_CS_fsm_state31;
wire   [7:0] jj_fu_964_p2;
reg   [7:0] jj_reg_1482;
wire   [47:0] grp_fu_1172_p3;
reg   [47:0] ret_V_12_reg_1490;
wire   [0:0] exitcond4_fu_959_p2;
wire   [0:0] or_cond8_fu_984_p2;
(* use_dsp48 = "no" *) wire   [31:0] tmp_fu_997_p2;
reg   [31:0] tmp_reg_1495;
wire   [47:0] tmp1_fu_1005_p2;
reg   [47:0] tmp1_reg_1500;
wire    ap_CS_fsm_state32;
wire   [15:0] cin_fu_1015_p2;
reg   [15:0] cin_reg_1508;
wire    ap_CS_fsm_state33;
reg   [31:0] gmem_addr_2_reg_1513;
wire   [0:0] exitcond5_fu_1010_p2;
wire   [31:0] next_mul_fu_1049_p2;
reg   [31:0] next_mul_reg_1519;
wire   [47:0] tmp_32_fu_1063_p2;
reg   [47:0] tmp_32_reg_1524;
reg   [31:0] gmem_addr_3_reg_1529;
reg   [31:0] gmem_addr_2_read_reg_1535;
reg   [31:0] gmem_addr_3_read_reg_1540;
wire   [31:0] grp_fu_467_p2;
reg   [31:0] tp_reg_1545;
wire    ap_CS_fsm_state46;
wire   [31:0] grp_fu_461_p2;
wire    ap_CS_fsm_state51;
reg   [31:0] gmem_addr_1_reg_1555;
wire    ap_CS_fsm_state53;
reg   [31:0] gmem_addr_read_reg_1561;
reg   [31:0] sum_3_reg_1566;
wire    ap_CS_fsm_state64;
wire   [31:0] sum_4_fu_1150_p3;
reg   [31:0] sum_4_reg_1573;
reg    ap_sig_ioackin_gmem_AWREADY;
reg   [15:0] i_op_assign_s_reg_278;
reg   [15:0] i_op_assign_1_reg_289;
reg   [15:0] phi_mul1_reg_300;
reg   [15:0] i_op_assign_2_reg_312;
reg   [31:0] ret_V_5_reg_323;
reg   [15:0] phi_mul3_reg_335;
reg   [31:0] sum_reg_346;
reg   [7:0] i_op_assign_3_reg_358;
reg   [15:0] ret_V_15_reg_369;
reg   [31:0] sum_1_reg_381;
wire    ap_CS_fsm_state52;
reg   [7:0] i_op_assign_4_reg_393;
reg   [23:0] ret_V_16_reg_404;
reg   [31:0] sum_2_reg_415;
reg   [15:0] i_op_assign_reg_426;
reg   [31:0] ret_V_17_reg_437;
reg   [31:0] sum_1_be_reg_448;
wire   [63:0] bias6_sum_cast_fu_825_p1;
wire   [63:0] feature_in2_sum9_cas_fu_1039_p1;
wire   [63:0] conv_w4_sum_cast_fu_1076_p1;
wire   [63:0] feature_out8_sum_cas_fu_1094_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
reg    ap_sig_ioackin_gmem_WREADY;
reg   [31:0] grp_fu_461_p0;
reg   [31:0] grp_fu_461_p1;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state43;
wire   [8:0] tmp_1_cast_fu_516_p1;
wire   [8:0] ret_V_tr_fu_520_p2;
wire   [8:0] p_neg4_fu_534_p2;
wire   [7:0] tmp_3_fu_540_p4;
wire   [8:0] tmp_34_cast_fu_556_p1;
wire   [8:0] ret_V_1_tr_fu_560_p2;
wire   [8:0] p_neg_fu_574_p2;
wire   [7:0] tmp_11_fu_580_p4;
wire   [0:0] tmp_10_fu_566_p3;
wire   [7:0] tmp_13_fu_600_p2;
wire   [7:0] tmp_12_fu_590_p4;
wire   [7:0] pad_y_V_fu_606_p3;
wire   [0:0] tmp_8_fu_526_p3;
wire   [7:0] tmp_6_fu_550_p2;
wire   [7:0] tmp_15_fu_622_p4;
wire   [7:0] tmp_17_fu_632_p3;
wire   [7:0] tmp_18_fu_640_p3;
wire   [8:0] ret_V_6_fu_648_p3;
wire   [16:0] lhs_V_4_cast_fu_660_p1;
wire   [16:0] ret_V_6_cast_fu_656_p1;
wire   [8:0] ret_V_2_fu_670_p3;
wire   [16:0] lhs_V_2_cast_fu_681_p1;
wire   [16:0] ret_V_2_cast_fu_677_p1;
wire   [16:0] ret_V_3_fu_684_p2;
wire   [17:0] ret_V_3_cast_fu_690_p1;
wire   [17:0] rhs_V_2_cast_fu_694_p1;
wire   [17:0] ret_V_4_fu_697_p2;
wire  signed [18:0] grp_fu_710_p0;
wire   [8:0] grp_fu_710_p1;
wire   [17:0] ret_V_7_cast_fu_716_p1;
wire   [17:0] rhs_V_5_cast_fu_719_p1;
wire   [17:0] ret_V_8_fu_722_p2;
wire  signed [18:0] grp_fu_735_p0;
wire   [8:0] grp_fu_735_p1;
wire   [15:0] grp_fu_735_p2;
wire   [15:0] tmp_21_fu_753_p1;
wire   [15:0] grp_fu_710_p2;
wire   [15:0] tmp_22_fu_763_p1;
wire   [30:0] tmp_13_cast1_fu_812_p1;
wire   [30:0] bias6_sum_fu_820_p2;
wire   [31:0] ret_V_1_fu_863_p0;
wire   [15:0] ret_V_1_fu_863_p1;
wire   [15:0] tmp_24_fu_910_p1;
wire   [15:0] h_V_fu_914_p2;
wire   [31:0] tmp3_fu_928_p2;
wire   [47:0] tmp3_cast_fu_933_p1;
wire   [31:0] ret_V_9_fu_945_p0;
wire   [15:0] ret_V_9_fu_945_p1;
wire   [15:0] tmp_27_fu_970_p1;
wire   [15:0] w_V_fu_974_p2;
wire   [0:0] tmp_28_fu_979_p2;
wire   [31:0] lhs_V_12_cast_fu_993_p1;
wire   [31:0] tmp1_fu_1005_p0;
wire   [15:0] tmp1_fu_1005_p1;
wire   [47:0] rhs_V_13_cast_fu_1021_p1;
(* use_dsp48 = "no" *) wire   [47:0] ret_V_14_fu_1025_p2;
wire   [48:0] tmp_29_cast_fu_1030_p1;
wire   [48:0] feature_in2_sum9_fu_1034_p2;
wire   [31:0] tmp2_fu_1054_p2;
wire   [47:0] tmp2_cast_fu_1059_p1;
wire   [48:0] tmp_32_cast_cast_fu_1068_p1;
wire   [48:0] conv_w4_sum_fu_1071_p2;
wire   [48:0] tmp_23_cast_cast_fu_1086_p1;
wire   [48:0] feature_out8_sum_fu_1089_p2;
wire   [31:0] sum_5_to_int_fu_1104_p1;
wire   [7:0] tmp_26_fu_1107_p4;
wire   [22:0] tmp_29_fu_1117_p1;
wire   [0:0] notrhs_fu_1127_p2;
wire   [0:0] notlhs_fu_1121_p2;
wire   [0:0] tmp_30_fu_1133_p2;
wire   [0:0] tmp_31_fu_471_p2;
wire   [0:0] tmp_33_fu_1139_p2;
wire   [0:0] or_cond_demorgan_fu_1145_p2;
wire   [15:0] ret_V_fu_1157_p0;
wire   [15:0] ret_V_fu_1157_p1;
wire   [15:0] ret_V_13_fu_1162_p0;
wire   [15:0] ret_V_13_fu_1162_p1;
wire   [15:0] ret_V_10_fu_1167_p0;
wire   [15:0] ret_V_10_fu_1167_p1;
wire   [15:0] grp_fu_1172_p0;
wire   [15:0] grp_fu_1172_p1;
reg    grp_fu_710_ap_start;
wire    grp_fu_710_ap_done;
reg    grp_fu_735_ap_start;
wire    grp_fu_735_ap_done;
reg   [70:0] ap_NS_fsm;
wire   [31:0] grp_fu_1172_p10;
wire   [18:0] grp_fu_710_p10;
wire   [18:0] grp_fu_735_p10;
wire   [31:0] ret_V_10_fu_1167_p00;
wire   [31:0] ret_V_13_fu_1162_p10;
wire   [47:0] ret_V_1_fu_863_p00;
wire   [47:0] ret_V_9_fu_945_p00;
wire   [31:0] ret_V_fu_1157_p00;
wire   [47:0] tmp1_fu_1005_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 71'd1;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

Conv_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Conv_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .CHin_V(CHin_V),
    .Hin_V(Hin_V),
    .Win_V(Win_V),
    .CHout_V(CHout_V),
    .Kx_V(Kx_V),
    .Ky_V(Ky_V),
    .Sx_V(Sx_V),
    .Sy_V(Sy_V),
    .pd_mode_V(pd_mode_V),
    .relu_en_V(relu_en_V),
    .feature_in(feature_in),
    .conv_w(conv_w),
    .bias(bias),
    .feature_out(feature_out)
);

Conv_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
Conv_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_1_reg_1555),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(sum_4_reg_1573),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

Conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Conv_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_461_p0),
    .din1(grp_fu_461_p1),
    .ce(1'b1),
    .dout(grp_fu_461_p2)
);

Conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Conv_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gmem_addr_2_read_reg_1535),
    .din1(gmem_addr_3_read_reg_1540),
    .ce(1'b1),
    .dout(grp_fu_467_p2)
);

Conv_fcmp_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Conv_fcmp_32ns_32dEe_U3(
    .din0(sum_3_reg_1566),
    .din1(32'd0),
    .opcode(5'd5),
    .dout(tmp_31_fu_471_p2)
);

Conv_sdiv_19s_9nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 23 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
Conv_sdiv_19s_9nseOg_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_710_ap_start),
    .done(grp_fu_710_ap_done),
    .din0(grp_fu_710_p0),
    .din1(grp_fu_710_p1),
    .ce(1'b1),
    .dout(grp_fu_710_p2)
);

Conv_sdiv_19s_9nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 23 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
Conv_sdiv_19s_9nseOg_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_735_ap_start),
    .done(grp_fu_735_ap_done),
    .din0(grp_fu_735_p0),
    .din1(grp_fu_735_p1),
    .ce(1'b1),
    .dout(grp_fu_735_p2)
);

Conv_mul_mul_16nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nsfYi_U6(
    .din0(ret_V_fu_1157_p0),
    .din1(ret_V_fu_1157_p1),
    .dout(ret_V_fu_1157_p2)
);

Conv_mul_mul_16nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nsfYi_U7(
    .din0(ret_V_13_fu_1162_p0),
    .din1(ret_V_13_fu_1162_p1),
    .dout(ret_V_13_fu_1162_p2)
);

Conv_mul_mul_16nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nsfYi_U8(
    .din0(ret_V_10_fu_1167_p0),
    .din1(ret_V_10_fu_1167_p1),
    .dout(ret_V_10_fu_1167_p2)
);

Conv_mac_muladd_1g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 48 ),
    .dout_WIDTH( 48 ))
Conv_mac_muladd_1g8j_U9(
    .din0(grp_fu_1172_p0),
    .din1(grp_fu_1172_p1),
    .din2(ret_V_9_reg_1464),
    .dout(grp_fu_1172_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29) & (exitcond3_fu_899_p2 == 1'd1)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29) & (exitcond3_fu_899_p2 == 1'd1)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state65)) begin
            if ((ap_sig_ioackin_gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state66)) begin
            if ((ap_sig_ioackin_gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (exitcond_fu_878_p2 == 1'd1))) begin
        i_op_assign_1_reg_289 <= i_reg_1393;
    end else if (((exitcond1_fu_801_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        i_op_assign_1_reg_289 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i_op_assign_2_reg_312 <= 16'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
        i_op_assign_2_reg_312 <= j_reg_1426;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (exitcond4_fu_959_p2 == 1'd1))) begin
        i_op_assign_3_reg_358 <= ii_reg_1444;
    end else if (((exitcond_fu_878_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        i_op_assign_3_reg_358 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        i_op_assign_4_reg_393 <= jj_reg_1482;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        i_op_assign_4_reg_393 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        i_op_assign_reg_426 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        i_op_assign_reg_426 <= cin_reg_1508;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (exitcond2_fu_844_p2 == 1'd1))) begin
        i_op_assign_s_reg_278 <= cout_reg_1368;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        i_op_assign_s_reg_278 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (exitcond_fu_878_p2 == 1'd1))) begin
        phi_mul1_reg_300 <= next_mul1_reg_1385;
    end else if (((exitcond1_fu_801_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        phi_mul1_reg_300 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        phi_mul3_reg_335 <= 16'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
        phi_mul3_reg_335 <= next_mul2_reg_1413;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (exitcond4_fu_959_p2 == 1'd1))) begin
        ret_V_15_reg_369 <= next_mul4_reg_1436;
    end else if (((exitcond_fu_878_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        ret_V_15_reg_369 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        ret_V_16_reg_404 <= next_mul5_reg_1474;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        ret_V_16_reg_404 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ret_V_17_reg_437 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        ret_V_17_reg_437 <= next_mul_reg_1519;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ret_V_5_reg_323 <= 32'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
        ret_V_5_reg_323 <= next_mul3_reg_1418;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (exitcond5_fu_1010_p2 == 1'd1))) begin
        sum_1_be_reg_448 <= sum_2_reg_415;
    end else if (((or_cond8_fu_984_p2 == 1'd0) & (exitcond4_fu_959_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        sum_1_be_reg_448 <= sum_1_reg_381;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        sum_1_reg_381 <= sum_1_be_reg_448;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        sum_1_reg_381 <= sum_reg_346;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        sum_2_reg_415 <= sum_1_reg_381;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        sum_2_reg_415 <= grp_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (exitcond4_fu_959_p2 == 1'd1))) begin
        sum_reg_346 <= sum_1_reg_381;
    end else if (((exitcond_fu_878_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        sum_reg_346 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        CHin_V_read_reg_1226 <= CHin_V;
        CHout_V_read_reg_1207 <= CHout_V;
        Hin_V_read_reg_1220 <= Hin_V;
        Kx_V_read_reg_1200 <= Kx_V;
        Ky_V_read_reg_1194 <= Ky_V;
        Sx_V_read_reg_1189 <= Sx_V;
        Sy_V_read_reg_1183 <= Sy_V;
        Win_V_read_reg_1214 <= Win_V;
        p_1_reg_1253 <= p_1_fu_614_p3;
        relu_en_V_read_reg_1178 <= relu_en_V;
        ret_V_7_reg_1259 <= ret_V_7_fu_664_p2;
        tmp_1_reg_1233 <= {{feature_out[31:2]}};
        tmp_2_reg_1238 <= {{bias[31:2]}};
        tmp_4_reg_1243 <= {{conv_w[31:2]}};
        tmp_5_reg_1248 <= {{feature_in[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        Wout_V_reg_1304 <= Wout_V_fu_757_p2;
        rhs_V_10_cast_reg_1349[15 : 0] <= rhs_V_10_cast_fu_791_p1[15 : 0];
        rhs_V_1_cast_reg_1338[7 : 0] <= rhs_V_1_cast_fu_785_p1[7 : 0];
        rhs_V_1_reg_1333[15 : 0] <= rhs_V_1_fu_782_p1[15 : 0];
        rhs_V_6_cast_reg_1360[15 : 0] <= rhs_V_6_cast_fu_797_p1[15 : 0];
        rhs_V_7_cast1_reg_1343[15 : 0] <= rhs_V_7_cast1_fu_788_p1[15 : 0];
        rhs_V_8_cast_reg_1354[15 : 0] <= rhs_V_8_cast_fu_794_p1[15 : 0];
        rhs_V_reg_1326[15 : 0] <= rhs_V_fu_779_p1[15 : 0];
        tmp_10_cast_reg_1294[29 : 0] <= tmp_10_cast_fu_747_p1[29 : 0];
        tmp_11_cast_reg_1299[29 : 0] <= tmp_11_cast_fu_750_p1[29 : 0];
        tmp_1_cast1_reg_1284[29 : 0] <= tmp_1_cast1_fu_741_p1[29 : 0];
        tmp_7_reg_1309 <= tmp_7_fu_767_p2;
        tmp_8_cast_reg_1289[29 : 0] <= tmp_8_cast_fu_744_p1[29 : 0];
        tmp_9_reg_1314[7 : 0] <= tmp_9_fu_773_p1[7 : 0];
        tmp_s_reg_1320[7 : 0] <= tmp_s_fu_776_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        cin_reg_1508 <= cin_fu_1015_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        cout_reg_1368 <= cout_fu_806_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        gmem_addr_1_reg_1555 <= feature_out8_sum_cas_fu_1094_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        gmem_addr_2_read_reg_1535 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_1010_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
        gmem_addr_2_reg_1513 <= feature_in2_sum9_cas_fu_1039_p1;
        next_mul_reg_1519 <= next_mul_fu_1049_p2;
        tmp_32_reg_1524 <= tmp_32_fu_1063_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        gmem_addr_3_read_reg_1540 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        gmem_addr_3_reg_1529 <= conv_w4_sum_cast_fu_1076_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
        gmem_addr_read_reg_1561 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_801_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        gmem_addr_reg_1379[30 : 0] <= bias6_sum_cast_fu_825_p1[30 : 0];
        tmp_13_cast_reg_1373[15 : 0] <= tmp_13_cast_fu_816_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        i_reg_1393 <= i_fu_849_p2;
        next_mul1_reg_1385 <= next_mul1_fu_835_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29))) begin
        ii_reg_1444 <= ii_fu_904_p2;
        next_mul4_reg_1436 <= next_mul4_fu_894_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        j_reg_1426 <= j_fu_883_p2;
        next_mul2_reg_1413 <= next_mul2_fu_868_p2;
        next_mul3_reg_1418 <= next_mul3_fu_873_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        jj_reg_1482 <= jj_fu_964_p2;
        next_mul5_reg_1474 <= next_mul5_fu_954_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        ret_V_10_reg_1469 <= ret_V_10_fu_1167_p2;
        ret_V_9_reg_1464 <= ret_V_9_fu_945_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_959_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31) & (or_cond8_fu_984_p2 == 1'd1))) begin
        ret_V_12_reg_1490 <= grp_fu_1172_p3;
        tmp_reg_1495 <= tmp_fu_997_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29) & (exitcond3_fu_899_p2 == 1'd0))) begin
        ret_V_13_reg_1454 <= ret_V_13_fu_1162_p2;
        tmp_25_reg_1449 <= tmp_25_fu_919_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ret_V_1_reg_1408 <= ret_V_1_fu_863_p2;
        tmp_16_reg_1403 <= tmp_16_fu_855_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_844_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        ret_V_reg_1398 <= ret_V_fu_1157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        sum_3_reg_1566 <= grp_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
        sum_4_reg_1573 <= sum_4_fu_1150_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp1_reg_1500 <= tmp1_fu_1005_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_878_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        tmp_19_reg_1431 <= tmp_19_fu_889_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29) & (exitcond3_fu_899_p2 == 1'd1))) begin
        tmp_23_reg_1459 <= tmp_23_fu_937_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        tp_reg_1545 <= grp_fu_467_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (exitcond1_fu_801_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (exitcond1_fu_801_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state35)) begin
            gmem_ARADDR = gmem_addr_3_reg_1529;
        end else if ((1'b1 == ap_CS_fsm_state34)) begin
            gmem_ARADDR = gmem_addr_2_reg_1513;
        end else if (((1'b1 == ap_CS_fsm_state29) & (exitcond3_fu_899_p2 == 1'd1))) begin
            gmem_ARADDR = gmem_addr_reg_1379;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state35)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state34)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state29) & (exitcond3_fu_899_p2 == 1'd1)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state65))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state66))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | ((1'b1 == ap_CS_fsm_state29) & (exitcond3_fu_899_p2 == 1'd1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state59))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_461_p0 = sum_reg_346;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_461_p0 = sum_2_reg_415;
    end else begin
        grp_fu_461_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_461_p1 = gmem_addr_read_reg_1561;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_461_p1 = tp_reg_1545;
    end else begin
        grp_fu_461_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_710_ap_start = 1'b1;
    end else begin
        grp_fu_710_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_735_ap_start = 1'b1;
    end else begin
        grp_fu_735_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (exitcond1_fu_801_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (exitcond2_fu_844_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (exitcond_fu_878_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29) & (exitcond3_fu_899_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else if (((1'b0 == ap_block_state29_io) & (1'b1 == ap_CS_fsm_state29) & (exitcond3_fu_899_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (exitcond4_fu_959_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else if (((or_cond8_fu_984_p2 == 1'd0) & (exitcond4_fu_959_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (exitcond5_fu_1010_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            if (((ap_sig_ioackin_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Wout_V_fu_757_p2 = (16'd1 + tmp_21_fu_753_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

always @ (*) begin
    ap_block_state29_io = ((ap_sig_ioackin_gmem_ARREADY == 1'b0) & (exitcond3_fu_899_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bias6_sum_cast_fu_825_p1 = bias6_sum_fu_820_p2;

assign bias6_sum_fu_820_p2 = (tmp_13_cast1_fu_812_p1 + tmp_8_cast_reg_1289);

assign cin_fu_1015_p2 = (i_op_assign_reg_426 + 16'd1);

assign conv_w4_sum_cast_fu_1076_p1 = conv_w4_sum_fu_1071_p2;

assign conv_w4_sum_fu_1071_p2 = (tmp_32_cast_cast_fu_1068_p1 + tmp_10_cast_reg_1294);

assign cout_fu_806_p2 = (i_op_assign_s_reg_278 + 16'd1);

assign exitcond1_fu_801_p2 = ((i_op_assign_s_reg_278 == CHout_V_read_reg_1207) ? 1'b1 : 1'b0);

assign exitcond2_fu_844_p2 = ((i_op_assign_1_reg_289 == tmp_7_reg_1309) ? 1'b1 : 1'b0);

assign exitcond3_fu_899_p2 = ((i_op_assign_3_reg_358 == Ky_V_read_reg_1194) ? 1'b1 : 1'b0);

assign exitcond4_fu_959_p2 = ((i_op_assign_4_reg_393 == Kx_V_read_reg_1200) ? 1'b1 : 1'b0);

assign exitcond5_fu_1010_p2 = ((i_op_assign_reg_426 == CHin_V_read_reg_1226) ? 1'b1 : 1'b0);

assign exitcond_fu_878_p2 = ((i_op_assign_2_reg_312 == Wout_V_reg_1304) ? 1'b1 : 1'b0);

assign feature_in2_sum9_cas_fu_1039_p1 = feature_in2_sum9_fu_1034_p2;

assign feature_in2_sum9_fu_1034_p2 = (tmp_29_cast_fu_1030_p1 + tmp_11_cast_reg_1299);

assign feature_out8_sum_cas_fu_1094_p1 = feature_out8_sum_fu_1089_p2;

assign feature_out8_sum_fu_1089_p2 = (tmp_1_cast1_reg_1284 + tmp_23_cast_cast_fu_1086_p1);

assign grp_fu_1172_p0 = rhs_V_reg_1326;

assign grp_fu_1172_p1 = grp_fu_1172_p10;

assign grp_fu_1172_p10 = w_V_fu_974_p2;

assign grp_fu_710_p0 = $signed(ret_V_4_fu_697_p2);

assign grp_fu_710_p1 = grp_fu_710_p10;

assign grp_fu_710_p10 = Sy_V_read_reg_1183;

assign grp_fu_735_p0 = $signed(ret_V_8_fu_722_p2);

assign grp_fu_735_p1 = grp_fu_735_p10;

assign grp_fu_735_p10 = Sx_V_read_reg_1189;

assign h_V_fu_914_p2 = (tmp_16_reg_1403 + tmp_24_fu_910_p1);

assign i_fu_849_p2 = (i_op_assign_1_reg_289 + 16'd1);

assign ii_fu_904_p2 = (i_op_assign_3_reg_358 + 8'd1);

assign j_fu_883_p2 = (i_op_assign_2_reg_312 + 16'd1);

assign jj_fu_964_p2 = (i_op_assign_4_reg_393 + 8'd1);

assign lhs_V_12_cast_fu_993_p1 = ret_V_16_reg_404;

assign lhs_V_2_cast_fu_681_p1 = Hin_V_read_reg_1220;

assign lhs_V_4_cast_fu_660_p1 = Win_V;

assign next_mul1_fu_835_p2 = (phi_mul1_reg_300 + tmp_9_reg_1314);

assign next_mul2_fu_868_p2 = (phi_mul3_reg_335 + tmp_9_reg_1314);

assign next_mul3_fu_873_p2 = (ret_V_5_reg_323 + rhs_V_8_cast_reg_1354);

assign next_mul4_fu_894_p2 = (ret_V_15_reg_369 + rhs_V_1_cast_reg_1338);

assign next_mul5_fu_954_p2 = (ret_V_16_reg_404 + rhs_V_10_cast_reg_1349);

assign next_mul_fu_1049_p2 = (rhs_V_8_cast_reg_1354 + ret_V_17_reg_437);

assign notlhs_fu_1121_p2 = ((tmp_26_fu_1107_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_1127_p2 = ((tmp_29_fu_1117_p1 == 23'd0) ? 1'b1 : 1'b0);

assign or_cond8_fu_984_p2 = (tmp_28_fu_979_p2 & tmp_25_reg_1449);

assign or_cond_demorgan_fu_1145_p2 = (tmp_33_fu_1139_p2 & relu_en_V_read_reg_1178);

assign p_1_fu_614_p3 = ((pd_mode_V[0:0] === 1'b1) ? pad_y_V_fu_606_p3 : 8'd0);

assign p_neg4_fu_534_p2 = (9'd1 - tmp_1_cast_fu_516_p1);

assign p_neg_fu_574_p2 = (9'd1 - tmp_34_cast_fu_556_p1);

assign pad_y_V_fu_606_p3 = ((tmp_10_fu_566_p3[0:0] === 1'b1) ? tmp_13_fu_600_p2 : tmp_12_fu_590_p4);

assign ret_V_10_fu_1167_p0 = ret_V_10_fu_1167_p00;

assign ret_V_10_fu_1167_p00 = ret_V_15_reg_369;

assign ret_V_10_fu_1167_p1 = rhs_V_reg_1326;

assign ret_V_13_fu_1162_p0 = rhs_V_reg_1326;

assign ret_V_13_fu_1162_p1 = ret_V_13_fu_1162_p10;

assign ret_V_13_fu_1162_p10 = h_V_fu_914_p2;

assign ret_V_14_fu_1025_p2 = (rhs_V_13_cast_fu_1021_p1 + ret_V_12_reg_1490);

assign ret_V_1_fu_863_p0 = ret_V_1_fu_863_p00;

assign ret_V_1_fu_863_p00 = ret_V_reg_1398;

assign ret_V_1_fu_863_p1 = rhs_V_7_cast1_reg_1343;

assign ret_V_1_fu_863_p2 = (ret_V_1_fu_863_p0 * ret_V_1_fu_863_p1);

assign ret_V_1_tr_fu_560_p2 = ($signed(9'd511) + $signed(tmp_34_cast_fu_556_p1));

assign ret_V_2_cast_fu_677_p1 = ret_V_2_fu_670_p3;

assign ret_V_2_fu_670_p3 = {{p_1_reg_1253}, {1'd0}};

assign ret_V_3_cast_fu_690_p1 = ret_V_3_fu_684_p2;

assign ret_V_3_fu_684_p2 = (lhs_V_2_cast_fu_681_p1 + ret_V_2_cast_fu_677_p1);

assign ret_V_4_fu_697_p2 = (ret_V_3_cast_fu_690_p1 - rhs_V_2_cast_fu_694_p1);

assign ret_V_6_cast_fu_656_p1 = ret_V_6_fu_648_p3;

assign ret_V_6_fu_648_p3 = {{tmp_18_fu_640_p3}, {1'd0}};

assign ret_V_7_cast_fu_716_p1 = ret_V_7_reg_1259;

assign ret_V_7_fu_664_p2 = (lhs_V_4_cast_fu_660_p1 + ret_V_6_cast_fu_656_p1);

assign ret_V_8_fu_722_p2 = (ret_V_7_cast_fu_716_p1 - rhs_V_5_cast_fu_719_p1);

assign ret_V_9_fu_945_p0 = ret_V_9_fu_945_p00;

assign ret_V_9_fu_945_p00 = ret_V_13_reg_1454;

assign ret_V_9_fu_945_p1 = rhs_V_1_reg_1333;

assign ret_V_9_fu_945_p2 = (ret_V_9_fu_945_p0 * ret_V_9_fu_945_p1);

assign ret_V_fu_1157_p0 = ret_V_fu_1157_p00;

assign ret_V_fu_1157_p00 = i_op_assign_1_reg_289;

assign ret_V_fu_1157_p1 = rhs_V_6_cast_reg_1360;

assign ret_V_tr_fu_520_p2 = ($signed(9'd511) + $signed(tmp_1_cast_fu_516_p1));

assign rhs_V_10_cast_fu_791_p1 = CHin_V_read_reg_1226;

assign rhs_V_13_cast_fu_1021_p1 = i_op_assign_reg_426;

assign rhs_V_1_cast_fu_785_p1 = Kx_V_read_reg_1200;

assign rhs_V_1_fu_782_p1 = Win_V_read_reg_1214;

assign rhs_V_2_cast_fu_694_p1 = Ky_V_read_reg_1194;

assign rhs_V_5_cast_fu_719_p1 = Kx_V_read_reg_1200;

assign rhs_V_6_cast_fu_797_p1 = Wout_V_fu_757_p2;

assign rhs_V_7_cast1_fu_788_p1 = CHout_V_read_reg_1207;

assign rhs_V_8_cast_fu_794_p1 = CHout_V_read_reg_1207;

assign rhs_V_fu_779_p1 = CHin_V_read_reg_1226;

assign sum_4_fu_1150_p3 = ((or_cond_demorgan_fu_1145_p2[0:0] === 1'b1) ? 32'd0 : sum_3_reg_1566);

assign sum_5_to_int_fu_1104_p1 = sum_3_reg_1566;

assign tmp1_fu_1005_p0 = tmp1_fu_1005_p00;

assign tmp1_fu_1005_p00 = tmp_reg_1495;

assign tmp1_fu_1005_p1 = rhs_V_7_cast1_reg_1343;

assign tmp1_fu_1005_p2 = (tmp1_fu_1005_p0 * tmp1_fu_1005_p1);

assign tmp2_cast_fu_1059_p1 = tmp2_fu_1054_p2;

assign tmp2_fu_1054_p2 = (tmp_13_cast_reg_1373 + ret_V_17_reg_437);

assign tmp3_cast_fu_933_p1 = tmp3_fu_928_p2;

assign tmp3_fu_928_p2 = (tmp_13_cast_reg_1373 + ret_V_5_reg_323);

assign tmp_10_cast_fu_747_p1 = tmp_4_reg_1243;

assign tmp_10_fu_566_p3 = ret_V_1_tr_fu_560_p2[32'd8];

assign tmp_11_cast_fu_750_p1 = tmp_5_reg_1248;

assign tmp_11_fu_580_p4 = {{p_neg_fu_574_p2[8:1]}};

assign tmp_12_fu_590_p4 = {{ret_V_1_tr_fu_560_p2[8:1]}};

assign tmp_13_cast1_fu_812_p1 = i_op_assign_s_reg_278;

assign tmp_13_cast_fu_816_p1 = i_op_assign_s_reg_278;

assign tmp_13_fu_600_p2 = (8'd0 - tmp_11_fu_580_p4);

assign tmp_15_fu_622_p4 = {{ret_V_tr_fu_520_p2[8:1]}};

assign tmp_16_fu_855_p2 = (phi_mul1_reg_300 - tmp_s_reg_1320);

assign tmp_17_fu_632_p3 = ((tmp_8_fu_526_p3[0:0] === 1'b1) ? tmp_6_fu_550_p2 : tmp_15_fu_622_p4);

assign tmp_18_fu_640_p3 = ((pd_mode_V[0:0] === 1'b1) ? tmp_17_fu_632_p3 : 8'd0);

assign tmp_19_fu_889_p2 = (phi_mul3_reg_335 - tmp_s_reg_1320);

assign tmp_1_cast1_fu_741_p1 = tmp_1_reg_1233;

assign tmp_1_cast_fu_516_p1 = Kx_V;

assign tmp_21_fu_753_p1 = grp_fu_735_p2[15:0];

assign tmp_22_fu_763_p1 = grp_fu_710_p2[15:0];

assign tmp_23_cast_cast_fu_1086_p1 = tmp_23_reg_1459;

assign tmp_23_fu_937_p2 = (ret_V_1_reg_1408 + tmp3_cast_fu_933_p1);

assign tmp_24_fu_910_p1 = i_op_assign_3_reg_358;

assign tmp_25_fu_919_p2 = ((h_V_fu_914_p2 < Hin_V_read_reg_1220) ? 1'b1 : 1'b0);

assign tmp_26_fu_1107_p4 = {{sum_5_to_int_fu_1104_p1[30:23]}};

assign tmp_27_fu_970_p1 = i_op_assign_4_reg_393;

assign tmp_28_fu_979_p2 = ((w_V_fu_974_p2 < Win_V_read_reg_1214) ? 1'b1 : 1'b0);

assign tmp_29_cast_fu_1030_p1 = ret_V_14_fu_1025_p2;

assign tmp_29_fu_1117_p1 = sum_5_to_int_fu_1104_p1[22:0];

assign tmp_30_fu_1133_p2 = (notrhs_fu_1127_p2 | notlhs_fu_1121_p2);

assign tmp_32_cast_cast_fu_1068_p1 = tmp_32_reg_1524;

assign tmp_32_fu_1063_p2 = (tmp1_reg_1500 + tmp2_cast_fu_1059_p1);

assign tmp_33_fu_1139_p2 = (tmp_31_fu_471_p2 & tmp_30_fu_1133_p2);

assign tmp_34_cast_fu_556_p1 = Ky_V;

assign tmp_3_fu_540_p4 = {{p_neg4_fu_534_p2[8:1]}};

assign tmp_6_fu_550_p2 = (8'd0 - tmp_3_fu_540_p4);

assign tmp_7_fu_767_p2 = (16'd1 + tmp_22_fu_763_p1);

assign tmp_8_cast_fu_744_p1 = tmp_2_reg_1238;

assign tmp_8_fu_526_p3 = ret_V_tr_fu_520_p2[32'd8];

assign tmp_9_fu_773_p1 = Sy_V_read_reg_1183;

assign tmp_fu_997_p2 = (ret_V_10_reg_1469 + lhs_V_12_cast_fu_993_p1);

assign tmp_s_fu_776_p1 = p_1_reg_1253;

assign w_V_fu_974_p2 = (tmp_27_fu_970_p1 + tmp_19_reg_1431);

always @ (posedge ap_clk) begin
    tmp_1_cast1_reg_1284[48:30] <= 19'b0000000000000000000;
    tmp_8_cast_reg_1289[30] <= 1'b0;
    tmp_10_cast_reg_1294[48:30] <= 19'b0000000000000000000;
    tmp_11_cast_reg_1299[48:30] <= 19'b0000000000000000000;
    tmp_9_reg_1314[15:8] <= 8'b00000000;
    tmp_s_reg_1320[15:8] <= 8'b00000000;
    rhs_V_reg_1326[31:16] <= 16'b0000000000000000;
    rhs_V_1_reg_1333[47:16] <= 32'b00000000000000000000000000000000;
    rhs_V_1_cast_reg_1338[15:8] <= 8'b00000000;
    rhs_V_7_cast1_reg_1343[47:16] <= 32'b00000000000000000000000000000000;
    rhs_V_10_cast_reg_1349[23:16] <= 8'b00000000;
    rhs_V_8_cast_reg_1354[31:16] <= 16'b0000000000000000;
    rhs_V_6_cast_reg_1360[31:16] <= 16'b0000000000000000;
    tmp_13_cast_reg_1373[31:16] <= 16'b0000000000000000;
    gmem_addr_reg_1379[31] <= 1'b0;
end

endmodule //Conv
