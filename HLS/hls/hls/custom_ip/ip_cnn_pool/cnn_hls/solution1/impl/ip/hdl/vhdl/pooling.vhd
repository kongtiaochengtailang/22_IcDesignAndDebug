-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of pooling is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pooling,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.482600,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=8,HLS_SYN_FF=4558,HLS_SYN_LUT=5479,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (129 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (129 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (129 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (129 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (129 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (129 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (129 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (129 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (129 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (129 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (129 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_D51184E7 : STD_LOGIC_VECTOR (31 downto 0) := "11010101000100011000010011100111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (129 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal CHin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Sc_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Sx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Sy_V : STD_LOGIC_VECTOR (7 downto 0);
    signal mode_V : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_in : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_out : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal exitcond4_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state124 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state124 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state70 : BOOLEAN;
    signal mode_V_read_reg_858 : STD_LOGIC_VECTOR (0 downto 0);
    signal Sc_V_read_reg_863 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V_read_reg_870 : STD_LOGIC_VECTOR (7 downto 0);
    signal Kx_V_read_reg_876 : STD_LOGIC_VECTOR (7 downto 0);
    signal Win_V_read_reg_882 : STD_LOGIC_VECTOR (15 downto 0);
    signal CHin_V_read_reg_887 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_893 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_4_reg_898 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_V_2_fu_478_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_2_reg_923 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal lhs_V_2_fu_481_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_2_reg_928 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_2_fu_484_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_2_reg_933 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_15_cast_fu_494_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_15_cast_reg_943 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_16_cast_fu_497_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_16_cast_reg_948 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_s_fu_504_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_953 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_514_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_958 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_3_fu_520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_3_reg_963 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_523_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_970 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_4_fu_530_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_4_reg_975 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_6_fu_533_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_reg_981 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_536_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_986 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_993 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_8_cast_fu_544_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal rhs_V_8_cast_reg_1001 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_2_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_1006 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal i_fu_557_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_1010 : STD_LOGIC_VECTOR (15 downto 0);
    signal ci_head_fu_563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_head_reg_1015 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal next_mul1_fu_567_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul1_reg_1020 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul2_fu_573_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul2_reg_1025 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_fu_578_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul9_fu_583_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul9_reg_1035 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal next_mul_fu_588_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_1040 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_598_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_1048 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_fu_609_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ii_reg_1056 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ret_V_8_fu_844_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_8_reg_1061 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_9_fu_632_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_9_reg_1066 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal jj_fu_642_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal jj_reg_1074 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ret_V_11_fu_655_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal ret_V_11_reg_1079 : STD_LOGIC_VECTOR (48 downto 0);
    signal exitcond3_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_1_reg_1084 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_4_reg_1090 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal s_fu_683_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_reg_1098 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_6_fu_773_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal grp_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ret_V_5_fu_785_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_5_reg_1113 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp1_fu_807_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp1_reg_1118 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal gmem_addr_reg_1123 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal i_op_assign_s_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_1_reg_218 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul1_reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_4_reg_241 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_2_reg_253 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_6_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul8_reg_276 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_3_reg_298 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_2_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal i_op_assign_4_reg_321 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal i_op_assign_5_reg_343 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_2_be_reg_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal sum_5_reg_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in2_sum_cast_fu_668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_out4_sum_cas_fu_834_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_fu_388_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_fu_422_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_fu_426_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_430_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_444_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_444_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_1_fu_450_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_1_fu_454_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_fu_458_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_472_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_472_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_2_fu_484_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_2_fu_484_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_472_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_500_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_444_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_510_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_548_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_548_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_615_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_fu_619_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_9_fu_632_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_9_fu_632_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_849_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_10_cast_fu_652_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_17_cast_fu_660_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal feature_in2_sum_fu_663_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal sum_3_to_int_fu_689_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in_load_1_to_fu_707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_693_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_703_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_711_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_721_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs9_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_5_fu_785_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_5_fu_785_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_790_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_790_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_fu_799_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_20_cast_fu_803_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_18_cast_fu_795_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_5_cast_fu_813_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp1_cast_fu_816_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_13_fu_819_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_22_cast_cast_fu_825_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal feature_out4_sum_fu_829_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal ret_V_8_fu_844_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_8_fu_844_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_849_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_849_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_444_ap_start : STD_LOGIC;
    signal grp_fu_444_ap_done : STD_LOGIC;
    signal grp_fu_472_ap_start : STD_LOGIC;
    signal grp_fu_472_ap_done : STD_LOGIC;
    signal grp_fu_548_ap_start : STD_LOGIC;
    signal grp_fu_548_ap_done : STD_LOGIC;
    signal grp_fu_790_ap_start : STD_LOGIC;
    signal grp_fu_790_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (129 downto 0);
    signal grp_fu_444_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_472_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_849_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_2_fu_484_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_2_fu_484_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_5_fu_785_p10 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_8_fu_844_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_9_fu_632_p00 : STD_LOGIC_VECTOR (47 downto 0);

    component pooling_fadd_32nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pooling_fdiv_32nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pooling_uitofp_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pooling_fcmp_32nseOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component pooling_sdiv_18s_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pooling_udiv_16nsg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pooling_sdiv_32s_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component pooling_mul_mul_1ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pooling_ama_addmujbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (47 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component pooling_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        CHin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Hin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Win_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Ky_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sc_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sy_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        mode_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        feature_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        feature_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pooling_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    pooling_AXILiteS_s_axi_U : component pooling_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        CHin_V => CHin_V,
        Hin_V => Hin_V,
        Win_V => Win_V,
        Kx_V => Kx_V,
        Ky_V => Ky_V,
        Sc_V => Sc_V,
        Sx_V => Sx_V,
        Sy_V => Sy_V,
        mode_V => mode_V,
        feature_in => feature_in,
        feature_out => feature_out);

    pooling_gmem_m_axi_U : component pooling_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_addr_1_reg_1084,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_reg_1123,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => sum_5_reg_366,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    pooling_fadd_32nsbkb_U1 : component pooling_fadd_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sum_2_reg_309,
        din1 => reg_396,
        ce => ap_const_logic_1,
        dout => grp_fu_378_p2);

    pooling_fdiv_32nscud_U2 : component pooling_fdiv_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_op_assign_reg_288,
        din1 => tmp_8_reg_993,
        ce => ap_const_logic_1,
        dout => grp_fu_383_p2);

    pooling_uitofp_32dEe_U3 : component pooling_uitofp_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_388_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_388_p1);

    pooling_fcmp_32nseOg_U4 : component pooling_fcmp_32nseOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => sum_3_reg_332,
        din1 => reg_396,
        opcode => ap_const_lv5_2,
        dout => tmp_23_fu_391_p2);

    pooling_sdiv_18s_fYi_U5 : component pooling_sdiv_18s_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 18,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_444_ap_start,
        done => grp_fu_444_ap_done,
        din0 => grp_fu_444_p0,
        din1 => grp_fu_444_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_444_p2);

    pooling_sdiv_18s_fYi_U6 : component pooling_sdiv_18s_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 18,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_472_ap_start,
        done => grp_fu_472_ap_done,
        din0 => grp_fu_472_p0,
        din1 => grp_fu_472_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_472_p2);

    pooling_udiv_16nsg8j_U7 : component pooling_udiv_16nsg8j
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_548_ap_start,
        done => grp_fu_548_ap_done,
        din0 => CHin_V_read_reg_887,
        din1 => grp_fu_548_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_548_p2);

    pooling_sdiv_32s_hbi_U8 : component pooling_sdiv_32s_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_790_ap_start,
        done => grp_fu_790_ap_done,
        din0 => i_op_assign_s_reg_206,
        din1 => grp_fu_790_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_790_p2);

    pooling_mul_mul_1ibs_U9 : component pooling_mul_mul_1ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => ret_V_8_fu_844_p0,
        din1 => ret_V_8_fu_844_p1,
        dout => ret_V_8_fu_844_p2);

    pooling_ama_addmujbC_U10 : component pooling_ama_addmujbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        din3_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        din0 => phi_mul8_reg_276,
        din1 => grp_fu_849_p1,
        din2 => grp_fu_849_p2,
        din3 => ret_V_9_reg_1066,
        dout => grp_fu_849_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state124)) then
                    if ((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((gmem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state125)) then
                    if ((ap_sig_ioackin_gmem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif ((gmem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_1_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_593_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                i_op_assign_1_reg_218 <= i_reg_1010;
            elsif (((tmp_2_fu_539_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                i_op_assign_1_reg_218 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i_op_assign_2_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1006 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                i_op_assign_2_reg_253 <= ap_const_lv16_0;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state130))) then 
                i_op_assign_2_reg_253 <= j_reg_1048;
            end if; 
        end if;
    end process;

    i_op_assign_3_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_593_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                i_op_assign_3_reg_298 <= ap_const_lv8_0;
            elsif (((exitcond3_fu_637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                i_op_assign_3_reg_298 <= ii_reg_1056;
            end if; 
        end if;
    end process;

    i_op_assign_4_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                i_op_assign_4_reg_321 <= jj_reg_1074;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                i_op_assign_4_reg_321 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_5_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                i_op_assign_5_reg_343 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                i_op_assign_5_reg_343 <= s_reg_1098;
            end if; 
        end if;
    end process;

    i_op_assign_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_593_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                i_op_assign_reg_288 <= sum_reg_970;
            elsif (((exitcond3_fu_637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                i_op_assign_reg_288 <= sum_2_reg_309;
            end if; 
        end if;
    end process;

    i_op_assign_s_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1006 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                i_op_assign_s_reg_206 <= c_fu_578_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i_op_assign_s_reg_206 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_593_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                phi_mul1_reg_229 <= next_mul2_reg_1025;
            elsif (((tmp_2_fu_539_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                phi_mul1_reg_229 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul8_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1006 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                phi_mul8_reg_276 <= ap_const_lv16_0;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state130))) then 
                phi_mul8_reg_276 <= next_mul9_reg_1035;
            end if; 
        end if;
    end process;

    ret_V_4_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_593_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                ret_V_4_reg_241 <= next_mul1_reg_1020;
            elsif (((tmp_2_fu_539_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                ret_V_4_reg_241 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ret_V_6_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_1006 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                ret_V_6_reg_264 <= ap_const_lv32_0;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state130))) then 
                ret_V_6_reg_264 <= next_mul_reg_1040;
            end if; 
        end if;
    end process;

    sum_2_be_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((gmem_RVALID = ap_const_logic_0) and (exitcond4_fu_678_p2 = ap_const_lv1_0))) and (exitcond4_fu_678_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
                sum_2_be_reg_354 <= sum_3_reg_332;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                sum_2_be_reg_354 <= sum_4_reg_1090;
            end if; 
        end if;
    end process;

    sum_2_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                sum_2_reg_309 <= sum_2_be_reg_354;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                sum_2_reg_309 <= i_op_assign_reg_288;
            end if; 
        end if;
    end process;

    sum_3_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                sum_3_reg_332 <= sum_2_reg_309;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                sum_3_reg_332 <= sum_6_fu_773_p3;
            end if; 
        end if;
    end process;

    sum_5_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_604_p2 = ap_const_lv1_1) and (mode_V_read_reg_858 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                sum_5_reg_366 <= i_op_assign_reg_288;
            elsif (((mode_V_read_reg_858 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
                sum_5_reg_366 <= grp_fu_383_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                CHin_V_read_reg_887 <= CHin_V;
                Kx_V_read_reg_876 <= Kx_V;
                Ky_V_read_reg_870 <= Ky_V;
                Sc_V_read_reg_863 <= Sc_V;
                Win_V_read_reg_882 <= Win_V;
                mode_V_read_reg_858 <= mode_V;
                tmp_3_reg_893 <= feature_out(31 downto 2);
                tmp_4_reg_898 <= feature_in(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                    ci_head_reg_1015(15 downto 0) <= ci_head_fu_563_p1(15 downto 0);
                next_mul1_reg_1020 <= next_mul1_fu_567_p2;
                next_mul2_reg_1025 <= next_mul2_fu_573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                exitcond1_reg_1006 <= exitcond1_fu_552_p2;
                i_reg_1010 <= i_fu_557_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                gmem_addr_1_reg_1084 <= feature_in2_sum_cast_fu_668_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state123)) then
                gmem_addr_reg_1123 <= feature_out4_sum_cas_fu_834_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                ii_reg_1056 <= ii_fu_609_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                j_reg_1048 <= j_fu_598_p2;
                next_mul9_reg_1035 <= next_mul9_fu_583_p2;
                next_mul_reg_1040 <= next_mul_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                jj_reg_1074 <= jj_fu_642_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                    lhs_V_2_reg_928(7 downto 0) <= lhs_V_2_fu_481_p1(7 downto 0);
                ret_V_2_reg_933 <= ret_V_2_fu_484_p2;
                    rhs_V_2_reg_923(7 downto 0) <= rhs_V_2_fu_478_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((gmem_RVALID = ap_const_logic_0) and (exitcond4_fu_678_p2 = ap_const_lv1_0))) and (exitcond4_fu_678_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56)))) then
                reg_396 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_637_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                ret_V_11_reg_1079 <= ret_V_11_fu_655_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then
                ret_V_5_reg_1113 <= ret_V_5_fu_785_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_604_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                ret_V_8_reg_1061 <= ret_V_8_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                ret_V_9_reg_1066 <= ret_V_9_fu_632_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                    rhs_V_3_reg_963(15 downto 0) <= rhs_V_3_fu_520_p1(15 downto 0);
                    rhs_V_4_reg_975(15 downto 0) <= rhs_V_4_fu_530_p1(15 downto 0);
                    sum_reg_970(2 downto 0) <= sum_fu_523_p3(2 downto 0);    sum_reg_970(7 downto 5) <= sum_fu_523_p3(7 downto 5);    sum_reg_970(10) <= sum_fu_523_p3(10);    sum_reg_970(16 downto 15) <= sum_fu_523_p3(16 downto 15);    sum_reg_970(20) <= sum_fu_523_p3(20);    sum_reg_970(24) <= sum_fu_523_p3(24);    sum_reg_970(26) <= sum_fu_523_p3(26);    sum_reg_970(28) <= sum_fu_523_p3(28);    sum_reg_970(31 downto 30) <= sum_fu_523_p3(31 downto 30);
                    tmp_15_cast_reg_943(29 downto 0) <= tmp_15_cast_fu_494_p1(29 downto 0);
                    tmp_16_cast_reg_948(29 downto 0) <= tmp_16_cast_fu_497_p1(29 downto 0);
                tmp_5_reg_958 <= tmp_5_fu_514_p2;
                    tmp_6_reg_981(7 downto 0) <= tmp_6_fu_533_p1(7 downto 0);
                    tmp_7_reg_986(7 downto 0) <= tmp_7_fu_536_p1(7 downto 0);
                tmp_8_reg_993 <= grp_fu_388_p1;
                tmp_s_reg_953 <= tmp_s_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_539_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                rhs_V_8_cast_reg_1001 <= rhs_V_8_cast_fu_544_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((gmem_RVALID = ap_const_logic_0) and (exitcond4_fu_678_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                s_reg_1098 <= s_fu_683_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                sum_4_reg_1090 <= grp_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state122)) then
                tmp1_reg_1118 <= tmp1_fu_807_p2;
            end if;
        end if;
    end process;
    rhs_V_2_reg_923(15 downto 8) <= "00000000";
    lhs_V_2_reg_928(15 downto 8) <= "00000000";
    tmp_15_cast_reg_943(49 downto 30) <= "00000000000000000000";
    tmp_16_cast_reg_948(49 downto 30) <= "00000000000000000000";
    rhs_V_3_reg_963(31 downto 16) <= "0000000000000000";
    sum_reg_970(4 downto 3) <= "00";
    sum_reg_970(9 downto 8) <= "00";
    sum_reg_970(14 downto 11) <= "0000";
    sum_reg_970(19 downto 17) <= "000";
    sum_reg_970(23 downto 21) <= "000";
    sum_reg_970(25 downto 25) <= "0";
    sum_reg_970(27 downto 27) <= "0";
    sum_reg_970(29) <= '0';
    rhs_V_4_reg_975(47 downto 16) <= "00000000000000000000000000000000";
    tmp_6_reg_981(15 downto 8) <= "00000000";
    tmp_7_reg_986(31 downto 8) <= "000000000000000000000000";
    ci_head_reg_1015(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state63, ap_CS_fsm_state49, ap_CS_fsm_state56, ap_CS_fsm_state70, exitcond4_fu_678_p2, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state130, gmem_RVALID, gmem_BVALID, mode_V_read_reg_858, ap_CS_fsm_state23, tmp_2_fu_539_p2, exitcond1_reg_1006, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, exitcond2_fu_604_p2, ap_CS_fsm_state47, exitcond3_fu_637_p2, ap_CS_fsm_state48, exitcond_fu_593_p2, ap_sig_ioackin_gmem_ARREADY, ap_sig_ioackin_gmem_AWREADY, ap_sig_ioackin_gmem_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((tmp_2_fu_539_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((exitcond1_reg_1006 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                if (((exitcond_fu_593_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                if (((exitcond2_fu_604_p2 = ap_const_lv1_1) and (mode_V_read_reg_858 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                elsif (((exitcond2_fu_604_p2 = ap_const_lv1_1) and (mode_V_read_reg_858 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((exitcond3_fu_637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state48 => 
                if (((mode_V_read_reg_858 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                if (((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state63 => 
                if (((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                if ((not(((gmem_RVALID = ap_const_logic_0) and (exitcond4_fu_678_p2 = ap_const_lv1_0))) and (exitcond4_fu_678_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                elsif ((not(((gmem_RVALID = ap_const_logic_0) and (exitcond4_fu_678_p2 = ap_const_lv1_0))) and (exitcond4_fu_678_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                if (((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state124))) then
                    ap_NS_fsm <= ap_ST_fsm_state125;
                else
                    ap_NS_fsm <= ap_ST_fsm_state124;
                end if;
            when ap_ST_fsm_state125 => 
                if (((ap_sig_ioackin_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state125))) then
                    ap_NS_fsm <= ap_ST_fsm_state126;
                else
                    ap_NS_fsm <= ap_ST_fsm_state125;
                end if;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state130))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state130;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state122 <= ap_CS_fsm(121);
    ap_CS_fsm_state123 <= ap_CS_fsm(122);
    ap_CS_fsm_state124 <= ap_CS_fsm(123);
    ap_CS_fsm_state125 <= ap_CS_fsm(124);
    ap_CS_fsm_state130 <= ap_CS_fsm(129);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);

    ap_block_state70_assign_proc : process(exitcond4_fu_678_p2, gmem_RVALID)
    begin
                ap_block_state70 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond4_fu_678_p2 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state23, tmp_2_fu_539_p2)
    begin
        if (((tmp_2_fu_539_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23, tmp_2_fu_539_p2)
    begin
        if (((tmp_2_fu_539_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    c_fu_578_p2 <= std_logic_vector(unsigned(tmp_7_reg_986) + unsigned(i_op_assign_s_reg_206));
    ci_head_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_548_p2),32));
    exitcond1_fu_552_p2 <= "1" when (i_op_assign_1_reg_218 = tmp_5_reg_958) else "0";
    exitcond2_fu_604_p2 <= "1" when (i_op_assign_3_reg_298 = Ky_V_read_reg_870) else "0";
    exitcond3_fu_637_p2 <= "1" when (i_op_assign_4_reg_321 = Kx_V_read_reg_876) else "0";
    exitcond4_fu_678_p2 <= "1" when (i_op_assign_5_reg_343 = Sc_V_read_reg_863) else "0";
    exitcond_fu_593_p2 <= "1" when (i_op_assign_2_reg_253 = tmp_s_reg_953) else "0";
        feature_in2_sum_cast_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(feature_in2_sum_fu_663_p2),64));

    feature_in2_sum_fu_663_p2 <= std_logic_vector(signed(tmp_17_cast_fu_660_p1) + signed(tmp_16_cast_reg_948));
    feature_in_load_1_to_fu_707_p1 <= reg_396;
        feature_out4_sum_cas_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(feature_out4_sum_fu_829_p2),64));

    feature_out4_sum_fu_829_p2 <= std_logic_vector(unsigned(tmp_15_cast_reg_943) + unsigned(tmp_22_cast_cast_fu_825_p1));

    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state49, tmp_7_reg_986, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                gmem_ARLEN <= tmp_7_reg_986;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                gmem_ARLEN <= ap_const_lv32_1;
            else 
                gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state49, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state49)) or ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state63)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state124, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state124))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state130, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state130))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state56, ap_CS_fsm_state70, exitcond4_fu_678_p2, gmem_RVALID)
    begin
        if (((not(((gmem_RVALID = ap_const_logic_0) and (exitcond4_fu_678_p2 = ap_const_lv1_0))) and (exitcond4_fu_678_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70)) or ((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state125, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state125))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state63, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state124)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state124)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state130)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state56, ap_CS_fsm_state70, exitcond4_fu_678_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or ((exitcond4_fu_678_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state125)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_388_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_reg_933),32));

    grp_fu_444_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_fu_444_ap_start <= ap_const_logic_1;
        else 
            grp_fu_444_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_444_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_430_p2),18));

    grp_fu_444_p1 <= grp_fu_444_p10(9 - 1 downto 0);
    grp_fu_444_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sy_V),18));

    grp_fu_472_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_fu_472_ap_start <= ap_const_logic_1;
        else 
            grp_fu_472_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_472_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_1_fu_458_p2),18));

    grp_fu_472_p1 <= grp_fu_472_p10(9 - 1 downto 0);
    grp_fu_472_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sx_V),18));

    grp_fu_548_ap_start_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_548_ap_start <= ap_const_logic_1;
        else 
            grp_fu_548_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_548_p1 <= tmp_6_reg_981(8 - 1 downto 0);

    grp_fu_790_ap_start_assign_proc : process(ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            grp_fu_790_ap_start <= ap_const_logic_1;
        else 
            grp_fu_790_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_790_p1 <= tmp_7_reg_986(9 - 1 downto 0);
    grp_fu_849_p1 <= grp_fu_849_p10(8 - 1 downto 0);
    grp_fu_849_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_4_reg_321),16));
    grp_fu_849_p2 <= rhs_V_3_reg_963(16 - 1 downto 0);
    h_V_fu_619_p2 <= std_logic_vector(unsigned(tmp_11_fu_615_p1) + unsigned(phi_mul1_reg_229));
    i_fu_557_p2 <= std_logic_vector(unsigned(i_op_assign_1_reg_218) + unsigned(ap_const_lv16_1));
    ii_fu_609_p2 <= std_logic_vector(unsigned(i_op_assign_3_reg_298) + unsigned(ap_const_lv8_1));
    j_fu_598_p2 <= std_logic_vector(unsigned(i_op_assign_2_reg_253) + unsigned(ap_const_lv16_1));
    jj_fu_642_p2 <= std_logic_vector(unsigned(i_op_assign_4_reg_321) + unsigned(ap_const_lv8_1));
    lhs_V_1_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Win_V),17));
    lhs_V_2_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_V_read_reg_876),16));
    lhs_V_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hin_V),17));
    next_mul1_fu_567_p2 <= std_logic_vector(unsigned(ret_V_4_reg_241) + unsigned(ci_head_fu_563_p1));
    next_mul2_fu_573_p2 <= std_logic_vector(unsigned(phi_mul1_reg_229) + unsigned(rhs_V_2_reg_923));
    next_mul9_fu_583_p2 <= std_logic_vector(unsigned(phi_mul8_reg_276) + unsigned(lhs_V_2_reg_928));
    next_mul_fu_588_p2 <= std_logic_vector(unsigned(ret_V_6_reg_264) + unsigned(ci_head_reg_1015));
    notlhs8_fu_743_p2 <= "0" when (tmp_18_fu_711_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_725_p2 <= "0" when (tmp_16_fu_693_p4 = ap_const_lv8_FF) else "1";
    notrhs9_fu_749_p2 <= "1" when (tmp_19_fu_721_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_731_p2 <= "1" when (tmp_17_fu_703_p1 = ap_const_lv23_0) else "0";
    ret_V_10_cast_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_849_p4),49));
    ret_V_11_fu_655_p2 <= std_logic_vector(signed(rhs_V_8_cast_reg_1001) + signed(ret_V_10_cast_fu_652_p1));
    ret_V_1_fu_458_p2 <= std_logic_vector(unsigned(lhs_V_1_fu_450_p1) - unsigned(rhs_V_1_fu_454_p1));
    ret_V_2_fu_484_p0 <= ret_V_2_fu_484_p00(8 - 1 downto 0);
    ret_V_2_fu_484_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_V_read_reg_876),16));
    ret_V_2_fu_484_p1 <= ret_V_2_fu_484_p10(8 - 1 downto 0);
    ret_V_2_fu_484_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky_V_read_reg_870),16));
    ret_V_2_fu_484_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_fu_484_p0) * unsigned(ret_V_2_fu_484_p1), 16));
    ret_V_5_cast_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_5_reg_1113),49));
    ret_V_5_fu_785_p0 <= rhs_V_4_reg_975(16 - 1 downto 0);
    ret_V_5_fu_785_p1 <= ret_V_5_fu_785_p10(32 - 1 downto 0);
    ret_V_5_fu_785_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_4_reg_241),48));
    ret_V_5_fu_785_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_5_fu_785_p0) * unsigned(ret_V_5_fu_785_p1), 48));
    ret_V_8_fu_844_p0 <= ret_V_8_fu_844_p00(16 - 1 downto 0);
    ret_V_8_fu_844_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_V_fu_619_p2),32));
    ret_V_8_fu_844_p1 <= rhs_V_3_reg_963(16 - 1 downto 0);
    ret_V_9_fu_632_p0 <= ret_V_9_fu_632_p00(32 - 1 downto 0);
    ret_V_9_fu_632_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_8_reg_1061),48));
    ret_V_9_fu_632_p1 <= rhs_V_4_reg_975(16 - 1 downto 0);
    ret_V_9_fu_632_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_9_fu_632_p0) * unsigned(ret_V_9_fu_632_p1), 48));
    ret_V_fu_430_p2 <= std_logic_vector(unsigned(lhs_V_fu_422_p1) - unsigned(rhs_V_fu_426_p1));
    rhs_V_1_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_V),17));
    rhs_V_2_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky_V_read_reg_870),16));
    rhs_V_3_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_V_read_reg_887),32));
    rhs_V_4_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Win_V_read_reg_882),48));
        rhs_V_8_cast_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_op_assign_s_reg_206),49));

    rhs_V_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky_V),17));
    s_fu_683_p2 <= std_logic_vector(unsigned(i_op_assign_5_reg_343) + unsigned(ap_const_lv8_1));
    sum_3_to_int_fu_689_p1 <= sum_3_reg_332;
    sum_6_fu_773_p3 <= 
        sum_3_reg_332 when (tmp_24_fu_767_p2(0) = '1') else 
        reg_396;
    sum_fu_523_p3 <= 
        ap_const_lv32_D51184E7 when (mode_V_read_reg_858(0) = '1') else 
        ap_const_lv32_0;
        tmp1_cast_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_reg_1118),49));

    tmp1_fu_807_p2 <= std_logic_vector(signed(tmp_20_cast_fu_803_p1) + signed(tmp_18_cast_fu_795_p1));
    tmp_10_fu_510_p1 <= grp_fu_444_p2(16 - 1 downto 0);
    tmp_11_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_3_reg_298),16));
    tmp_13_fu_819_p2 <= std_logic_vector(unsigned(ret_V_5_cast_fu_813_p1) + unsigned(tmp1_cast_fu_816_p1));
    tmp_15_cast_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_893),50));
    tmp_15_fu_799_p1 <= grp_fu_790_p2(9 - 1 downto 0);
    tmp_16_cast_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_898),50));
    tmp_16_fu_693_p4 <= sum_3_to_int_fu_689_p1(30 downto 23);
        tmp_17_cast_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_11_reg_1079),50));

    tmp_17_fu_703_p1 <= sum_3_to_int_fu_689_p1(23 - 1 downto 0);
    tmp_18_cast_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_6_reg_264),33));
    tmp_18_fu_711_p4 <= feature_in_load_1_to_fu_707_p1(30 downto 23);
    tmp_19_fu_721_p1 <= feature_in_load_1_to_fu_707_p1(23 - 1 downto 0);
        tmp_20_cast_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_799_p1),33));

    tmp_20_fu_737_p2 <= (notrhs_fu_731_p2 or notlhs_fu_725_p2);
    tmp_21_fu_755_p2 <= (notrhs9_fu_749_p2 or notlhs8_fu_743_p2);
        tmp_22_cast_cast_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_819_p2),50));

    tmp_22_fu_761_p2 <= (tmp_21_fu_755_p2 and tmp_20_fu_737_p2);
    tmp_24_fu_767_p2 <= (tmp_23_fu_391_p2 and tmp_22_fu_761_p2);
    tmp_2_fu_539_p2 <= "1" when (signed(i_op_assign_s_reg_206) < signed(rhs_V_3_reg_963)) else "0";
    tmp_5_fu_514_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_10_fu_510_p1));
    tmp_6_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sc_V_read_reg_863),16));
    tmp_7_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sc_V_read_reg_863),32));
    tmp_9_fu_500_p1 <= grp_fu_472_p2(16 - 1 downto 0);
    tmp_s_fu_504_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_9_fu_500_p1));
end behav;
