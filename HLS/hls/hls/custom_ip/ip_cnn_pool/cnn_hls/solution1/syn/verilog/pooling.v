// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pooling,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.482600,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=8,HLS_SYN_FF=4558,HLS_SYN_LUT=5479,HLS_VERSION=2018_3}" *)

module pooling (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 130'd1;
parameter    ap_ST_fsm_state2 = 130'd2;
parameter    ap_ST_fsm_state3 = 130'd4;
parameter    ap_ST_fsm_state4 = 130'd8;
parameter    ap_ST_fsm_state5 = 130'd16;
parameter    ap_ST_fsm_state6 = 130'd32;
parameter    ap_ST_fsm_state7 = 130'd64;
parameter    ap_ST_fsm_state8 = 130'd128;
parameter    ap_ST_fsm_state9 = 130'd256;
parameter    ap_ST_fsm_state10 = 130'd512;
parameter    ap_ST_fsm_state11 = 130'd1024;
parameter    ap_ST_fsm_state12 = 130'd2048;
parameter    ap_ST_fsm_state13 = 130'd4096;
parameter    ap_ST_fsm_state14 = 130'd8192;
parameter    ap_ST_fsm_state15 = 130'd16384;
parameter    ap_ST_fsm_state16 = 130'd32768;
parameter    ap_ST_fsm_state17 = 130'd65536;
parameter    ap_ST_fsm_state18 = 130'd131072;
parameter    ap_ST_fsm_state19 = 130'd262144;
parameter    ap_ST_fsm_state20 = 130'd524288;
parameter    ap_ST_fsm_state21 = 130'd1048576;
parameter    ap_ST_fsm_state22 = 130'd2097152;
parameter    ap_ST_fsm_state23 = 130'd4194304;
parameter    ap_ST_fsm_state24 = 130'd8388608;
parameter    ap_ST_fsm_state25 = 130'd16777216;
parameter    ap_ST_fsm_state26 = 130'd33554432;
parameter    ap_ST_fsm_state27 = 130'd67108864;
parameter    ap_ST_fsm_state28 = 130'd134217728;
parameter    ap_ST_fsm_state29 = 130'd268435456;
parameter    ap_ST_fsm_state30 = 130'd536870912;
parameter    ap_ST_fsm_state31 = 130'd1073741824;
parameter    ap_ST_fsm_state32 = 130'd2147483648;
parameter    ap_ST_fsm_state33 = 130'd4294967296;
parameter    ap_ST_fsm_state34 = 130'd8589934592;
parameter    ap_ST_fsm_state35 = 130'd17179869184;
parameter    ap_ST_fsm_state36 = 130'd34359738368;
parameter    ap_ST_fsm_state37 = 130'd68719476736;
parameter    ap_ST_fsm_state38 = 130'd137438953472;
parameter    ap_ST_fsm_state39 = 130'd274877906944;
parameter    ap_ST_fsm_state40 = 130'd549755813888;
parameter    ap_ST_fsm_state41 = 130'd1099511627776;
parameter    ap_ST_fsm_state42 = 130'd2199023255552;
parameter    ap_ST_fsm_state43 = 130'd4398046511104;
parameter    ap_ST_fsm_state44 = 130'd8796093022208;
parameter    ap_ST_fsm_state45 = 130'd17592186044416;
parameter    ap_ST_fsm_state46 = 130'd35184372088832;
parameter    ap_ST_fsm_state47 = 130'd70368744177664;
parameter    ap_ST_fsm_state48 = 130'd140737488355328;
parameter    ap_ST_fsm_state49 = 130'd281474976710656;
parameter    ap_ST_fsm_state50 = 130'd562949953421312;
parameter    ap_ST_fsm_state51 = 130'd1125899906842624;
parameter    ap_ST_fsm_state52 = 130'd2251799813685248;
parameter    ap_ST_fsm_state53 = 130'd4503599627370496;
parameter    ap_ST_fsm_state54 = 130'd9007199254740992;
parameter    ap_ST_fsm_state55 = 130'd18014398509481984;
parameter    ap_ST_fsm_state56 = 130'd36028797018963968;
parameter    ap_ST_fsm_state57 = 130'd72057594037927936;
parameter    ap_ST_fsm_state58 = 130'd144115188075855872;
parameter    ap_ST_fsm_state59 = 130'd288230376151711744;
parameter    ap_ST_fsm_state60 = 130'd576460752303423488;
parameter    ap_ST_fsm_state61 = 130'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 130'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 130'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 130'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 130'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 130'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 130'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 130'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 130'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 130'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 130'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 130'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 130'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 130'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 130'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 130'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 130'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 130'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 130'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 130'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 130'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 130'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 130'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 130'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 130'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 130'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 130'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 130'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 130'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 130'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 130'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 130'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 130'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 130'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 130'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 130'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 130'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 130'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 130'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 130'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 130'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 130'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 130'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 130'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 130'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 130'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 130'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 130'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 130'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 130'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 130'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 130'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 130'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 130'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 130'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 130'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 130'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 130'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 130'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 130'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 130'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 130'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 130'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 130'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 130'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 130'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 130'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 130'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 130'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 130'd680564733841876926926749214863536422912;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [129:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] CHin_V;
wire   [15:0] Hin_V;
wire   [15:0] Win_V;
wire   [7:0] Kx_V;
wire   [7:0] Ky_V;
wire   [7:0] Sc_V;
wire   [7:0] Sx_V;
wire   [7:0] Sy_V;
wire   [0:0] mode_V;
wire   [31:0] feature_in;
wire   [31:0] feature_out;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state49;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state70;
wire   [0:0] exitcond4_fu_678_p2;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state124;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state125;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state130;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [31:0] reg_396;
reg    ap_block_state70;
reg   [0:0] mode_V_read_reg_858;
reg   [7:0] Sc_V_read_reg_863;
reg   [7:0] Ky_V_read_reg_870;
reg   [7:0] Kx_V_read_reg_876;
reg   [15:0] Win_V_read_reg_882;
reg   [15:0] CHin_V_read_reg_887;
reg   [29:0] tmp_3_reg_893;
reg   [29:0] tmp_4_reg_898;
wire   [15:0] rhs_V_2_fu_478_p1;
reg   [15:0] rhs_V_2_reg_923;
wire    ap_CS_fsm_state16;
wire   [15:0] lhs_V_2_fu_481_p1;
reg   [15:0] lhs_V_2_reg_928;
wire   [15:0] ret_V_2_fu_484_p2;
reg   [15:0] ret_V_2_reg_933;
wire    ap_CS_fsm_state17;
wire   [49:0] tmp_15_cast_fu_494_p1;
reg   [49:0] tmp_15_cast_reg_943;
wire    ap_CS_fsm_state22;
wire   [49:0] tmp_16_cast_fu_497_p1;
reg   [49:0] tmp_16_cast_reg_948;
wire   [15:0] tmp_s_fu_504_p2;
reg   [15:0] tmp_s_reg_953;
wire   [15:0] tmp_5_fu_514_p2;
reg   [15:0] tmp_5_reg_958;
wire   [31:0] rhs_V_3_fu_520_p1;
reg   [31:0] rhs_V_3_reg_963;
wire   [31:0] sum_fu_523_p3;
reg   [31:0] sum_reg_970;
wire   [47:0] rhs_V_4_fu_530_p1;
reg   [47:0] rhs_V_4_reg_975;
wire   [15:0] tmp_6_fu_533_p1;
reg   [15:0] tmp_6_reg_981;
wire   [31:0] tmp_7_fu_536_p1;
reg   [31:0] tmp_7_reg_986;
wire   [31:0] grp_fu_388_p1;
reg   [31:0] tmp_8_reg_993;
wire  signed [48:0] rhs_V_8_cast_fu_544_p1;
reg  signed [48:0] rhs_V_8_cast_reg_1001;
wire    ap_CS_fsm_state23;
wire   [0:0] tmp_2_fu_539_p2;
wire   [0:0] exitcond1_fu_552_p2;
reg   [0:0] exitcond1_reg_1006;
wire    ap_CS_fsm_state24;
wire   [15:0] i_fu_557_p2;
reg   [15:0] i_reg_1010;
wire   [31:0] ci_head_fu_563_p1;
reg   [31:0] ci_head_reg_1015;
wire    ap_CS_fsm_state43;
wire   [31:0] next_mul1_fu_567_p2;
reg   [31:0] next_mul1_reg_1020;
wire   [15:0] next_mul2_fu_573_p2;
reg   [15:0] next_mul2_reg_1025;
wire   [31:0] c_fu_578_p2;
wire   [15:0] next_mul9_fu_583_p2;
reg   [15:0] next_mul9_reg_1035;
wire    ap_CS_fsm_state44;
wire   [31:0] next_mul_fu_588_p2;
reg   [31:0] next_mul_reg_1040;
wire   [15:0] j_fu_598_p2;
reg   [15:0] j_reg_1048;
wire   [7:0] ii_fu_609_p2;
reg   [7:0] ii_reg_1056;
wire    ap_CS_fsm_state45;
wire   [31:0] ret_V_8_fu_844_p2;
reg   [31:0] ret_V_8_reg_1061;
wire   [0:0] exitcond2_fu_604_p2;
wire   [47:0] ret_V_9_fu_632_p2;
reg   [47:0] ret_V_9_reg_1066;
wire    ap_CS_fsm_state46;
wire   [7:0] jj_fu_642_p2;
reg   [7:0] jj_reg_1074;
wire    ap_CS_fsm_state47;
wire   [48:0] ret_V_11_fu_655_p2;
reg   [48:0] ret_V_11_reg_1079;
wire   [0:0] exitcond3_fu_637_p2;
reg   [31:0] gmem_addr_1_reg_1084;
wire    ap_CS_fsm_state48;
wire   [31:0] grp_fu_378_p2;
reg   [31:0] sum_4_reg_1090;
wire    ap_CS_fsm_state61;
wire   [7:0] s_fu_683_p2;
reg   [7:0] s_reg_1098;
wire   [31:0] sum_6_fu_773_p3;
wire    ap_CS_fsm_state71;
wire   [31:0] grp_fu_383_p2;
wire    ap_CS_fsm_state87;
wire   [47:0] ret_V_5_fu_785_p2;
reg   [47:0] ret_V_5_reg_1113;
wire   [32:0] tmp1_fu_807_p2;
reg   [32:0] tmp1_reg_1118;
wire    ap_CS_fsm_state122;
reg   [31:0] gmem_addr_reg_1123;
wire    ap_CS_fsm_state123;
reg  signed [31:0] i_op_assign_s_reg_206;
reg   [15:0] i_op_assign_1_reg_218;
wire   [0:0] exitcond_fu_593_p2;
reg   [15:0] phi_mul1_reg_229;
reg   [31:0] ret_V_4_reg_241;
reg   [15:0] i_op_assign_2_reg_253;
reg   [31:0] ret_V_6_reg_264;
reg   [15:0] phi_mul8_reg_276;
reg   [31:0] i_op_assign_reg_288;
reg   [7:0] i_op_assign_3_reg_298;
reg   [31:0] sum_2_reg_309;
wire    ap_CS_fsm_state72;
reg   [7:0] i_op_assign_4_reg_321;
reg   [31:0] sum_3_reg_332;
wire    ap_CS_fsm_state69;
reg   [7:0] i_op_assign_5_reg_343;
reg   [31:0] sum_2_be_reg_354;
wire    ap_CS_fsm_state62;
reg   [31:0] sum_5_reg_366;
wire  signed [63:0] feature_in2_sum_cast_fu_668_p1;
wire  signed [63:0] feature_out4_sum_cas_fu_834_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_sig_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
reg    ap_sig_ioackin_gmem_WREADY;
wire    ap_CS_fsm_state57;
wire   [31:0] grp_fu_388_p0;
wire   [16:0] lhs_V_fu_422_p1;
wire   [16:0] rhs_V_fu_426_p1;
wire   [16:0] ret_V_fu_430_p2;
wire  signed [17:0] grp_fu_444_p0;
wire   [8:0] grp_fu_444_p1;
wire   [16:0] lhs_V_1_fu_450_p1;
wire   [16:0] rhs_V_1_fu_454_p1;
wire   [16:0] ret_V_1_fu_458_p2;
wire  signed [17:0] grp_fu_472_p0;
wire   [8:0] grp_fu_472_p1;
wire   [7:0] ret_V_2_fu_484_p0;
wire   [7:0] ret_V_2_fu_484_p1;
wire   [15:0] grp_fu_472_p2;
wire   [15:0] tmp_9_fu_500_p1;
wire   [15:0] grp_fu_444_p2;
wire   [15:0] tmp_10_fu_510_p1;
wire   [7:0] grp_fu_548_p1;
wire   [15:0] grp_fu_548_p2;
wire   [15:0] tmp_11_fu_615_p1;
wire   [15:0] h_V_fu_619_p2;
wire   [31:0] ret_V_9_fu_632_p0;
wire   [15:0] ret_V_9_fu_632_p1;
wire   [47:0] grp_fu_849_p4;
wire   [48:0] ret_V_10_cast_fu_652_p1;
wire  signed [49:0] tmp_17_cast_fu_660_p1;
wire   [49:0] feature_in2_sum_fu_663_p2;
wire   [31:0] sum_3_to_int_fu_689_p1;
wire   [31:0] feature_in_load_1_to_fu_707_p1;
wire   [7:0] tmp_16_fu_693_p4;
wire   [22:0] tmp_17_fu_703_p1;
wire   [0:0] notrhs_fu_731_p2;
wire   [0:0] notlhs_fu_725_p2;
wire   [7:0] tmp_18_fu_711_p4;
wire   [22:0] tmp_19_fu_721_p1;
wire   [0:0] notrhs9_fu_749_p2;
wire   [0:0] notlhs8_fu_743_p2;
wire   [0:0] tmp_20_fu_737_p2;
wire   [0:0] tmp_21_fu_755_p2;
wire   [0:0] tmp_22_fu_761_p2;
wire   [0:0] tmp_23_fu_391_p2;
wire   [0:0] tmp_24_fu_767_p2;
wire   [15:0] ret_V_5_fu_785_p0;
wire   [31:0] ret_V_5_fu_785_p1;
wire   [8:0] grp_fu_790_p1;
wire   [8:0] grp_fu_790_p2;
wire   [8:0] tmp_15_fu_799_p1;
wire  signed [32:0] tmp_20_cast_fu_803_p1;
wire   [32:0] tmp_18_cast_fu_795_p1;
wire   [48:0] ret_V_5_cast_fu_813_p1;
wire  signed [48:0] tmp1_cast_fu_816_p1;
wire   [48:0] tmp_13_fu_819_p2;
wire  signed [49:0] tmp_22_cast_cast_fu_825_p1;
wire   [49:0] feature_out4_sum_fu_829_p2;
wire   [15:0] ret_V_8_fu_844_p0;
wire   [15:0] ret_V_8_fu_844_p1;
wire   [7:0] grp_fu_849_p1;
wire   [15:0] grp_fu_849_p2;
reg    grp_fu_444_ap_start;
wire    grp_fu_444_ap_done;
reg    grp_fu_472_ap_start;
wire    grp_fu_472_ap_done;
reg    grp_fu_548_ap_start;
wire    grp_fu_548_ap_done;
reg    grp_fu_790_ap_start;
wire    grp_fu_790_ap_done;
reg   [129:0] ap_NS_fsm;
wire   [17:0] grp_fu_444_p10;
wire   [17:0] grp_fu_472_p10;
wire   [15:0] grp_fu_849_p10;
wire   [15:0] ret_V_2_fu_484_p00;
wire   [15:0] ret_V_2_fu_484_p10;
wire   [47:0] ret_V_5_fu_785_p10;
wire   [31:0] ret_V_8_fu_844_p00;
wire   [47:0] ret_V_9_fu_632_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 130'd1;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

pooling_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
pooling_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .CHin_V(CHin_V),
    .Hin_V(Hin_V),
    .Win_V(Win_V),
    .Kx_V(Kx_V),
    .Ky_V(Ky_V),
    .Sc_V(Sc_V),
    .Sx_V(Sx_V),
    .Sy_V(Sy_V),
    .mode_V(mode_V),
    .feature_in(feature_in),
    .feature_out(feature_out)
);

pooling_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
pooling_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_addr_1_reg_1084),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_reg_1123),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(sum_5_reg_366),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

pooling_fadd_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pooling_fadd_32nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_2_reg_309),
    .din1(reg_396),
    .ce(1'b1),
    .dout(grp_fu_378_p2)
);

pooling_fdiv_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pooling_fdiv_32nscud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_op_assign_reg_288),
    .din1(tmp_8_reg_993),
    .ce(1'b1),
    .dout(grp_fu_383_p2)
);

pooling_uitofp_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pooling_uitofp_32dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_388_p0),
    .ce(1'b1),
    .dout(grp_fu_388_p1)
);

pooling_fcmp_32nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
pooling_fcmp_32nseOg_U4(
    .din0(sum_3_reg_332),
    .din1(reg_396),
    .opcode(5'd2),
    .dout(tmp_23_fu_391_p2)
);

pooling_sdiv_18s_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
pooling_sdiv_18s_fYi_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_444_ap_start),
    .done(grp_fu_444_ap_done),
    .din0(grp_fu_444_p0),
    .din1(grp_fu_444_p1),
    .ce(1'b1),
    .dout(grp_fu_444_p2)
);

pooling_sdiv_18s_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
pooling_sdiv_18s_fYi_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_472_ap_start),
    .done(grp_fu_472_ap_done),
    .din0(grp_fu_472_p0),
    .din1(grp_fu_472_p1),
    .ce(1'b1),
    .dout(grp_fu_472_p2)
);

pooling_udiv_16nsg8j #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
pooling_udiv_16nsg8j_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_548_ap_start),
    .done(grp_fu_548_ap_done),
    .din0(CHin_V_read_reg_887),
    .din1(grp_fu_548_p1),
    .ce(1'b1),
    .dout(grp_fu_548_p2)
);

pooling_sdiv_32s_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
pooling_sdiv_32s_hbi_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_790_ap_start),
    .done(grp_fu_790_ap_done),
    .din0(i_op_assign_s_reg_206),
    .din1(grp_fu_790_p1),
    .ce(1'b1),
    .dout(grp_fu_790_p2)
);

pooling_mul_mul_1ibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
pooling_mul_mul_1ibs_U9(
    .din0(ret_V_8_fu_844_p0),
    .din1(ret_V_8_fu_844_p1),
    .dout(ret_V_8_fu_844_p2)
);

pooling_ama_addmujbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 48 ),
    .dout_WIDTH( 48 ))
pooling_ama_addmujbC_U10(
    .din0(phi_mul8_reg_276),
    .din1(grp_fu_849_p1),
    .din2(grp_fu_849_p2),
    .din3(ret_V_9_reg_1066),
    .dout(grp_fu_849_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state49)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state63)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state49)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state63)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state124)) begin
            if ((ap_sig_ioackin_gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state125)) begin
            if ((ap_sig_ioackin_gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_593_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
        i_op_assign_1_reg_218 <= i_reg_1010;
    end else if (((tmp_2_fu_539_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        i_op_assign_1_reg_218 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1006 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        i_op_assign_2_reg_253 <= 16'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state130))) begin
        i_op_assign_2_reg_253 <= j_reg_1048;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_593_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        i_op_assign_3_reg_298 <= 8'd0;
    end else if (((exitcond3_fu_637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        i_op_assign_3_reg_298 <= ii_reg_1056;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        i_op_assign_4_reg_321 <= jj_reg_1074;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        i_op_assign_4_reg_321 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        i_op_assign_5_reg_343 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        i_op_assign_5_reg_343 <= s_reg_1098;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_593_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        i_op_assign_reg_288 <= sum_reg_970;
    end else if (((exitcond3_fu_637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        i_op_assign_reg_288 <= sum_2_reg_309;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1006 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        i_op_assign_s_reg_206 <= c_fu_578_p2;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        i_op_assign_s_reg_206 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_593_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
        phi_mul1_reg_229 <= next_mul2_reg_1025;
    end else if (((tmp_2_fu_539_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        phi_mul1_reg_229 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1006 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        phi_mul8_reg_276 <= 16'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state130))) begin
        phi_mul8_reg_276 <= next_mul9_reg_1035;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_593_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
        ret_V_4_reg_241 <= next_mul1_reg_1020;
    end else if (((tmp_2_fu_539_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        ret_V_4_reg_241 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_1006 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        ret_V_6_reg_264 <= 32'd0;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state130))) begin
        ret_V_6_reg_264 <= next_mul_reg_1040;
    end
end

always @ (posedge ap_clk) begin
    if ((~((gmem_RVALID == 1'b0) & (exitcond4_fu_678_p2 == 1'd0)) & (exitcond4_fu_678_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state70))) begin
        sum_2_be_reg_354 <= sum_3_reg_332;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        sum_2_be_reg_354 <= sum_4_reg_1090;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        sum_2_reg_309 <= sum_2_be_reg_354;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        sum_2_reg_309 <= i_op_assign_reg_288;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        sum_3_reg_332 <= sum_2_reg_309;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        sum_3_reg_332 <= sum_6_fu_773_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_604_p2 == 1'd1) & (mode_V_read_reg_858 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        sum_5_reg_366 <= i_op_assign_reg_288;
    end else if (((mode_V_read_reg_858 == 1'd0) & (1'b1 == ap_CS_fsm_state87))) begin
        sum_5_reg_366 <= grp_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        CHin_V_read_reg_887 <= CHin_V;
        Kx_V_read_reg_876 <= Kx_V;
        Ky_V_read_reg_870 <= Ky_V;
        Sc_V_read_reg_863 <= Sc_V;
        Win_V_read_reg_882 <= Win_V;
        mode_V_read_reg_858 <= mode_V;
        tmp_3_reg_893 <= {{feature_out[31:2]}};
        tmp_4_reg_898 <= {{feature_in[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        ci_head_reg_1015[15 : 0] <= ci_head_fu_563_p1[15 : 0];
        next_mul1_reg_1020 <= next_mul1_fu_567_p2;
        next_mul2_reg_1025 <= next_mul2_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        exitcond1_reg_1006 <= exitcond1_fu_552_p2;
        i_reg_1010 <= i_fu_557_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        gmem_addr_1_reg_1084 <= feature_in2_sum_cast_fu_668_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state123)) begin
        gmem_addr_reg_1123 <= feature_out4_sum_cas_fu_834_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ii_reg_1056 <= ii_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        j_reg_1048 <= j_fu_598_p2;
        next_mul9_reg_1035 <= next_mul9_fu_583_p2;
        next_mul_reg_1040 <= next_mul_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        jj_reg_1074 <= jj_fu_642_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        lhs_V_2_reg_928[7 : 0] <= lhs_V_2_fu_481_p1[7 : 0];
        ret_V_2_reg_933 <= ret_V_2_fu_484_p2;
        rhs_V_2_reg_923[7 : 0] <= rhs_V_2_fu_478_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((~((gmem_RVALID == 1'b0) & (exitcond4_fu_678_p2 == 1'd0)) & (exitcond4_fu_678_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state70)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state56)))) begin
        reg_396 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_637_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47))) begin
        ret_V_11_reg_1079 <= ret_V_11_fu_655_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        ret_V_5_reg_1113 <= ret_V_5_fu_785_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_604_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
        ret_V_8_reg_1061 <= ret_V_8_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        ret_V_9_reg_1066 <= ret_V_9_fu_632_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        rhs_V_3_reg_963[15 : 0] <= rhs_V_3_fu_520_p1[15 : 0];
        rhs_V_4_reg_975[15 : 0] <= rhs_V_4_fu_530_p1[15 : 0];
        sum_reg_970[2 : 0] <= sum_fu_523_p3[2 : 0];
sum_reg_970[7 : 5] <= sum_fu_523_p3[7 : 5];
sum_reg_970[10] <= sum_fu_523_p3[10];
sum_reg_970[16 : 15] <= sum_fu_523_p3[16 : 15];
sum_reg_970[20] <= sum_fu_523_p3[20];
sum_reg_970[24] <= sum_fu_523_p3[24];
sum_reg_970[26] <= sum_fu_523_p3[26];
sum_reg_970[28] <= sum_fu_523_p3[28];
sum_reg_970[31 : 30] <= sum_fu_523_p3[31 : 30];
        tmp_15_cast_reg_943[29 : 0] <= tmp_15_cast_fu_494_p1[29 : 0];
        tmp_16_cast_reg_948[29 : 0] <= tmp_16_cast_fu_497_p1[29 : 0];
        tmp_5_reg_958 <= tmp_5_fu_514_p2;
        tmp_6_reg_981[7 : 0] <= tmp_6_fu_533_p1[7 : 0];
        tmp_7_reg_986[7 : 0] <= tmp_7_fu_536_p1[7 : 0];
        tmp_8_reg_993 <= grp_fu_388_p1;
        tmp_s_reg_953 <= tmp_s_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_539_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        rhs_V_8_cast_reg_1001 <= rhs_V_8_cast_fu_544_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((gmem_RVALID == 1'b0) & (exitcond4_fu_678_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state70))) begin
        s_reg_1098 <= s_fu_683_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        sum_4_reg_1090 <= grp_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state122)) begin
        tmp1_reg_1118 <= tmp1_fu_807_p2;
    end
end

always @ (*) begin
    if (((tmp_2_fu_539_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_fu_539_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state63)) begin
            gmem_ARLEN = tmp_7_reg_986;
        end else if ((1'b1 == ap_CS_fsm_state49)) begin
            gmem_ARLEN = 32'd1;
        end else begin
            gmem_ARLEN = 'bx;
        end
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state49)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state63)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state124))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state130))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((~((gmem_RVALID == 1'b0) & (exitcond4_fu_678_p2 == 1'd0)) & (exitcond4_fu_678_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state70)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state56)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state125))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state63))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state124)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state130)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) | ((exitcond4_fu_678_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state70)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state125)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grp_fu_444_ap_start = 1'b1;
    end else begin
        grp_fu_444_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grp_fu_472_ap_start = 1'b1;
    end else begin
        grp_fu_472_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_548_ap_start = 1'b1;
    end else begin
        grp_fu_548_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        grp_fu_790_ap_start = 1'b1;
    end else begin
        grp_fu_790_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((tmp_2_fu_539_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((exitcond1_reg_1006 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((exitcond_fu_593_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((exitcond2_fu_604_p2 == 1'd1) & (mode_V_read_reg_858 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else if (((exitcond2_fu_604_p2 == 1'd1) & (mode_V_read_reg_858 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((exitcond3_fu_637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((mode_V_read_reg_858 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state63 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            if ((~((gmem_RVALID == 1'b0) & (exitcond4_fu_678_p2 == 1'd0)) & (exitcond4_fu_678_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state70))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else if ((~((gmem_RVALID == 1'b0) & (exitcond4_fu_678_p2 == 1'd0)) & (exitcond4_fu_678_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state70))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state124))) begin
                ap_NS_fsm = ap_ST_fsm_state125;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state124;
            end
        end
        ap_ST_fsm_state125 : begin
            if (((ap_sig_ioackin_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state125))) begin
                ap_NS_fsm = ap_ST_fsm_state126;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state125;
            end
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state130))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state130;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

always @ (*) begin
    ap_block_state70 = ((gmem_RVALID == 1'b0) & (exitcond4_fu_678_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_fu_578_p2 = ($signed(tmp_7_reg_986) + $signed(i_op_assign_s_reg_206));

assign ci_head_fu_563_p1 = grp_fu_548_p2;

assign exitcond1_fu_552_p2 = ((i_op_assign_1_reg_218 == tmp_5_reg_958) ? 1'b1 : 1'b0);

assign exitcond2_fu_604_p2 = ((i_op_assign_3_reg_298 == Ky_V_read_reg_870) ? 1'b1 : 1'b0);

assign exitcond3_fu_637_p2 = ((i_op_assign_4_reg_321 == Kx_V_read_reg_876) ? 1'b1 : 1'b0);

assign exitcond4_fu_678_p2 = ((i_op_assign_5_reg_343 == Sc_V_read_reg_863) ? 1'b1 : 1'b0);

assign exitcond_fu_593_p2 = ((i_op_assign_2_reg_253 == tmp_s_reg_953) ? 1'b1 : 1'b0);

assign feature_in2_sum_cast_fu_668_p1 = $signed(feature_in2_sum_fu_663_p2);

assign feature_in2_sum_fu_663_p2 = ($signed(tmp_17_cast_fu_660_p1) + $signed(tmp_16_cast_reg_948));

assign feature_in_load_1_to_fu_707_p1 = reg_396;

assign feature_out4_sum_cas_fu_834_p1 = $signed(feature_out4_sum_fu_829_p2);

assign feature_out4_sum_fu_829_p2 = ($signed(tmp_15_cast_reg_943) + $signed(tmp_22_cast_cast_fu_825_p1));

assign grp_fu_388_p0 = ret_V_2_reg_933;

assign grp_fu_444_p0 = $signed(ret_V_fu_430_p2);

assign grp_fu_444_p1 = grp_fu_444_p10;

assign grp_fu_444_p10 = Sy_V;

assign grp_fu_472_p0 = $signed(ret_V_1_fu_458_p2);

assign grp_fu_472_p1 = grp_fu_472_p10;

assign grp_fu_472_p10 = Sx_V;

assign grp_fu_548_p1 = tmp_6_reg_981;

assign grp_fu_790_p1 = tmp_7_reg_986;

assign grp_fu_849_p1 = grp_fu_849_p10;

assign grp_fu_849_p10 = i_op_assign_4_reg_321;

assign grp_fu_849_p2 = rhs_V_3_reg_963;

assign h_V_fu_619_p2 = (tmp_11_fu_615_p1 + phi_mul1_reg_229);

assign i_fu_557_p2 = (i_op_assign_1_reg_218 + 16'd1);

assign ii_fu_609_p2 = (i_op_assign_3_reg_298 + 8'd1);

assign j_fu_598_p2 = (i_op_assign_2_reg_253 + 16'd1);

assign jj_fu_642_p2 = (i_op_assign_4_reg_321 + 8'd1);

assign lhs_V_1_fu_450_p1 = Win_V;

assign lhs_V_2_fu_481_p1 = Kx_V_read_reg_876;

assign lhs_V_fu_422_p1 = Hin_V;

assign next_mul1_fu_567_p2 = (ret_V_4_reg_241 + ci_head_fu_563_p1);

assign next_mul2_fu_573_p2 = (phi_mul1_reg_229 + rhs_V_2_reg_923);

assign next_mul9_fu_583_p2 = (phi_mul8_reg_276 + lhs_V_2_reg_928);

assign next_mul_fu_588_p2 = (ret_V_6_reg_264 + ci_head_reg_1015);

assign notlhs8_fu_743_p2 = ((tmp_18_fu_711_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_725_p2 = ((tmp_16_fu_693_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs9_fu_749_p2 = ((tmp_19_fu_721_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_731_p2 = ((tmp_17_fu_703_p1 == 23'd0) ? 1'b1 : 1'b0);

assign ret_V_10_cast_fu_652_p1 = grp_fu_849_p4;

assign ret_V_11_fu_655_p2 = ($signed(rhs_V_8_cast_reg_1001) + $signed(ret_V_10_cast_fu_652_p1));

assign ret_V_1_fu_458_p2 = (lhs_V_1_fu_450_p1 - rhs_V_1_fu_454_p1);

assign ret_V_2_fu_484_p0 = ret_V_2_fu_484_p00;

assign ret_V_2_fu_484_p00 = Kx_V_read_reg_876;

assign ret_V_2_fu_484_p1 = ret_V_2_fu_484_p10;

assign ret_V_2_fu_484_p10 = Ky_V_read_reg_870;

assign ret_V_2_fu_484_p2 = (ret_V_2_fu_484_p0 * ret_V_2_fu_484_p1);

assign ret_V_5_cast_fu_813_p1 = ret_V_5_reg_1113;

assign ret_V_5_fu_785_p0 = rhs_V_4_reg_975;

assign ret_V_5_fu_785_p1 = ret_V_5_fu_785_p10;

assign ret_V_5_fu_785_p10 = ret_V_4_reg_241;

assign ret_V_5_fu_785_p2 = (ret_V_5_fu_785_p0 * ret_V_5_fu_785_p1);

assign ret_V_8_fu_844_p0 = ret_V_8_fu_844_p00;

assign ret_V_8_fu_844_p00 = h_V_fu_619_p2;

assign ret_V_8_fu_844_p1 = rhs_V_3_reg_963;

assign ret_V_9_fu_632_p0 = ret_V_9_fu_632_p00;

assign ret_V_9_fu_632_p00 = ret_V_8_reg_1061;

assign ret_V_9_fu_632_p1 = rhs_V_4_reg_975;

assign ret_V_9_fu_632_p2 = (ret_V_9_fu_632_p0 * ret_V_9_fu_632_p1);

assign ret_V_fu_430_p2 = (lhs_V_fu_422_p1 - rhs_V_fu_426_p1);

assign rhs_V_1_fu_454_p1 = Kx_V;

assign rhs_V_2_fu_478_p1 = Ky_V_read_reg_870;

assign rhs_V_3_fu_520_p1 = CHin_V_read_reg_887;

assign rhs_V_4_fu_530_p1 = Win_V_read_reg_882;

assign rhs_V_8_cast_fu_544_p1 = i_op_assign_s_reg_206;

assign rhs_V_fu_426_p1 = Ky_V;

assign s_fu_683_p2 = (i_op_assign_5_reg_343 + 8'd1);

assign sum_3_to_int_fu_689_p1 = sum_3_reg_332;

assign sum_6_fu_773_p3 = ((tmp_24_fu_767_p2[0:0] === 1'b1) ? sum_3_reg_332 : reg_396);

assign sum_fu_523_p3 = ((mode_V_read_reg_858[0:0] === 1'b1) ? 32'd3574695143 : 32'd0);

assign tmp1_cast_fu_816_p1 = $signed(tmp1_reg_1118);

assign tmp1_fu_807_p2 = ($signed(tmp_20_cast_fu_803_p1) + $signed(tmp_18_cast_fu_795_p1));

assign tmp_10_fu_510_p1 = grp_fu_444_p2[15:0];

assign tmp_11_fu_615_p1 = i_op_assign_3_reg_298;

assign tmp_13_fu_819_p2 = ($signed(ret_V_5_cast_fu_813_p1) + $signed(tmp1_cast_fu_816_p1));

assign tmp_15_cast_fu_494_p1 = tmp_3_reg_893;

assign tmp_15_fu_799_p1 = grp_fu_790_p2[8:0];

assign tmp_16_cast_fu_497_p1 = tmp_4_reg_898;

assign tmp_16_fu_693_p4 = {{sum_3_to_int_fu_689_p1[30:23]}};

assign tmp_17_cast_fu_660_p1 = $signed(ret_V_11_reg_1079);

assign tmp_17_fu_703_p1 = sum_3_to_int_fu_689_p1[22:0];

assign tmp_18_cast_fu_795_p1 = ret_V_6_reg_264;

assign tmp_18_fu_711_p4 = {{feature_in_load_1_to_fu_707_p1[30:23]}};

assign tmp_19_fu_721_p1 = feature_in_load_1_to_fu_707_p1[22:0];

assign tmp_20_cast_fu_803_p1 = $signed(tmp_15_fu_799_p1);

assign tmp_20_fu_737_p2 = (notrhs_fu_731_p2 | notlhs_fu_725_p2);

assign tmp_21_fu_755_p2 = (notrhs9_fu_749_p2 | notlhs8_fu_743_p2);

assign tmp_22_cast_cast_fu_825_p1 = $signed(tmp_13_fu_819_p2);

assign tmp_22_fu_761_p2 = (tmp_21_fu_755_p2 & tmp_20_fu_737_p2);

assign tmp_24_fu_767_p2 = (tmp_23_fu_391_p2 & tmp_22_fu_761_p2);

assign tmp_2_fu_539_p2 = (($signed(i_op_assign_s_reg_206) < $signed(rhs_V_3_reg_963)) ? 1'b1 : 1'b0);

assign tmp_5_fu_514_p2 = (16'd1 + tmp_10_fu_510_p1);

assign tmp_6_fu_533_p1 = Sc_V_read_reg_863;

assign tmp_7_fu_536_p1 = Sc_V_read_reg_863;

assign tmp_9_fu_500_p1 = grp_fu_472_p2[15:0];

assign tmp_s_fu_504_p2 = (16'd1 + tmp_9_fu_500_p1);

always @ (posedge ap_clk) begin
    rhs_V_2_reg_923[15:8] <= 8'b00000000;
    lhs_V_2_reg_928[15:8] <= 8'b00000000;
    tmp_15_cast_reg_943[49:30] <= 20'b00000000000000000000;
    tmp_16_cast_reg_948[49:30] <= 20'b00000000000000000000;
    rhs_V_3_reg_963[31:16] <= 16'b0000000000000000;
    sum_reg_970[4:3] <= 2'b00;
    sum_reg_970[9:8] <= 2'b00;
    sum_reg_970[14:11] <= 4'b0000;
    sum_reg_970[19:17] <= 3'b000;
    sum_reg_970[23:21] <= 3'b000;
    sum_reg_970[25:25] <= 1'b0;
    sum_reg_970[27:27] <= 1'b0;
    sum_reg_970[29] <= 1'b0;
    rhs_V_4_reg_975[47:16] <= 32'b00000000000000000000000000000000;
    tmp_6_reg_981[15:8] <= 8'b00000000;
    tmp_7_reg_986[31:8] <= 24'b000000000000000000000000;
    ci_head_reg_1015[31:16] <= 16'b0000000000000000;
end

endmodule //pooling
